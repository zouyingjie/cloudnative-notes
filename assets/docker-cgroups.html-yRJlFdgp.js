import{_ as o,r,c,o as l,b as s,a as t,d as a,e as p}from"./app-C-eiXR-Q.js";const u={},i={href:"https://docs.kernel.org/admin-guide/cgroup-v1/index.html#cgroup-v1",target:"_blank",rel:"noopener noreferrer"},m={href:"https://coolshell.cn/articles/17049.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://facebookmicrosites.github.io/cgroup2/docs/overview.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://facebookmicrosites.github.io/cgroup2/docs/overview.html",target:"_blank",rel:"noopener noreferrer"};function b(v,n){const e=r("ExternalLinkIcon");return l(),c("div",null,[n[8]||(n[8]=s("h1",{id:"容器基础技术-cgroups",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#容器基础技术-cgroups","aria-hidden":"true"},"#"),a(" 容器基础技术：cgroups")],-1)),n[9]||(n[9]=s("blockquote",null,[s("p",null,"本篇基于 cgroupv2 进行介绍，对 cgroupv1 的设计不做赘述，感兴趣的同学可以参考如下文章：")],-1)),s("ul",null,[s("li",null,[s("a",i,[n[0]||(n[0]=a("Control Groups version 1",-1)),p(e)])]),s("li",null,[s("a",m,[n[1]||(n[1]=a("Docker基础技术：Linux CGroup",-1)),p(e)])])]),n[10]||(n[10]=t(`<p>cgroup（控制组，Control Group）是 Linux 内核提供的一种机制，可以限制进程/线程使用的资源，比如 CPU、内存、磁盘 IO 等。</p><h2 id="案例-cgroup-限制内存" tabindex="-1"><a class="header-anchor" href="#案例-cgroup-限制内存" aria-hidden="true">#</a> 案例：cgroup 限制内存</h2><p>我们先来看一个用 cgroup 限制进程内存使用的例子。我们使用如下代码，每秒分配 500KB 内存，然后我们使用 cgroup 将目标进程的内存使用限制为 5MB，这样程序分配的内存超过 5MB 时会被杀死。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">cgroup</span><span class="token expression"><span class="token operator">-</span>mem<span class="token operator">-</span>test<span class="token punctuation">.</span>c</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> chunk_size <span class="token operator">=</span> <span class="token number">102400</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 1024 bytes * 100 * 5，每次分配 500 KB</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>chunk_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;out of memory!!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> chunk_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        size <span class="token operator">+=</span> chunk_size<span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%d] - memory is allocated [%8d] KB \\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译后正常执行，程序会不断分配内存。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./cgroup-mem-test
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>     <span class="token number">500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">1000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">1500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">2000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">2500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">3000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">3500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">4000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">4500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">5000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">5500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">6000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">6500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">7000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">7500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">116459</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">8000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们创建 cgroup 将内存限制为 5MB。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建新的控制组</span>
$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /sys/fs/cgroup/mygroup
<span class="token comment"># 限制最大内存为 5MB，这里是用的字节</span>
<span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token variable">))</span></span> <span class="token operator">&gt;</span> /sys/fs/cgroup/mygroup/memory.max

<span class="token comment"># 启动程序后，将进程 ID 加入到控制组</span>
./cgroup-mem-test <span class="token operator">&amp;</span> <span class="token builtin class-name">echo</span> <span class="token variable">$!</span> <span class="token operator">&gt;</span> /sys/fs/cgroup/mygroup/cgroup.procs

$ <span class="token function">sudo</span> <span class="token function">cat</span> /sys/fs/cgroup/mygroup/cgroup.procs
<span class="token number">118058</span>

$ ./cgroup-mem-test
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>     <span class="token number">500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">1000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">1500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">2000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">2500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">3000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">3500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">4000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">4500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">5000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">5500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">6000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">6500</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">118058</span><span class="token punctuation">]</span> - memory is allocated <span class="token punctuation">[</span>    <span class="token number">7000</span><span class="token punctuation">]</span> KB
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token number">118058</span> killed     ./cgroup-mem-test
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到程序在运行一段时间后被 kill 掉了，使用 <code>journalctl -k</code> 命令查看日志可以看到如下信息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Mar <span class="token number">17</span> <span class="token number">15</span>:43:44 vm-01 kernel: Tasks state <span class="token punctuation">(</span>memory values <span class="token keyword">in</span> pages<span class="token punctuation">)</span>:
Mar <span class="token number">17</span> <span class="token number">15</span>:43:44 vm-01 kernel: <span class="token punctuation">[</span>  pid  <span class="token punctuation">]</span>   uid  tgid total_vm      rss pgtables_bytes swapents oom_score_adj name
Mar <span class="token number">17</span> <span class="token number">15</span>:43:44 vm-01 kernel: <span class="token punctuation">[</span> <span class="token number">118058</span><span class="token punctuation">]</span>  <span class="token number">1000</span> <span class="token number">118058</span>     <span class="token number">2584</span>     <span class="token number">2196</span>    <span class="token number">61440</span>        <span class="token number">0</span>             <span class="token number">0</span> cgroup-mem-test
Mar <span class="token number">17</span> <span class="token number">15</span>:43:44 vm-01 kernel: oom-kill:constraint<span class="token operator">=</span>CONSTRAINT_MEMCG,nodemask<span class="token operator">=</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span>,cpuset<span class="token operator">=</span>mygroup,mems_allowed<span class="token operator">=</span><span class="token number">0</span>,oom_memcg<span class="token operator">=</span>/mygroup,task_memcg<span class="token operator">=</span>/mygroup,task<span class="token operator">=</span>cgroup-mem-test,pid<span class="token operator">=</span><span class="token number">118058</span>,uid<span class="token operator">=</span><span class="token number">1000</span>
Mar <span class="token number">17</span> <span class="token number">15</span>:43:44 vm-01 kernel: Memory cgroup out of memory: Killed process <span class="token number">118058</span> <span class="token punctuation">(</span>cgroup-mem-test<span class="token punctuation">)</span> total-vm:10336kB, anon-rss:7160kB, file-rss:1624kB, shmem-rss:0kB, <span class="token environment constant">UID</span>:1000 pgtables:60kB oom_score_adj:0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从日志看出起实际内存为 2196 页，即 2196 * 4KB 大约 8MB，超出了 cgroup 的限制，因此在 cgroup 范围内（constraint=CONSTRAINT_MEMCG）由 mygroup (task_memcg=/mygroup) 控制组杀死，最终报 <code>Memory cgroup out of memory: Killed process 118058 (cgroup-mem-test) </code> 错误。</p><p>通过以上例子我们可以对 cgroup 有一个直观的认识，下面我们来系统梳理下 cgroup 的相关概念和用法。</p><h2 id="cgroup-术语" tabindex="-1"><a class="header-anchor" href="#cgroup-术语" aria-hidden="true">#</a> cGroup 术语</h2><h3 id="控制器-controller" tabindex="-1"><a class="header-anchor" href="#控制器-controller" aria-hidden="true">#</a> 控制器（controller）</h3>`,14)),s("p",null,[n[3]||(n[3]=s("img",{src:"https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/cgroup-v2-01.png",alt:""},null,-1)),n[4]||(n[4]=a(" 图片来自：",-1)),s("a",k,[n[2]||(n[2]=a("cgroup2",-1)),p(e)])]),n[11]||(n[11]=t(`<p>控制器也叫做子系统，是 Linux 提供的管理各种资源限制的对象，比如我们例子用到的 memory.max 就属于 memory 子系统。下面是 cgroup v2 支持的一些控制器：</p><table><thead><tr><th>子系统</th><th>主要功能</th><th>关键接口文件</th></tr></thead><tbody><tr><td>cpu</td><td>控制CPU使用和调度</td><td>cpu.max, cpu.weight, cpu.stat</td></tr><tr><td>cpuset</td><td>控制CPU核心和内存节点分配</td><td>cpuset.cpus, cpuset.mems</td></tr><tr><td>memory</td><td>控制内存使用</td><td>memory.max, memory.high, memory.low, memory.current</td></tr><tr><td>io</td><td>控制块设备I/O</td><td>io.max, io.weight, io.stat</td></tr><tr><td>pids</td><td>控制进程数量</td><td>pids.max, pids.current</td></tr><tr><td>freezer</td><td>控制组暂停/恢复</td><td>cgroup.freeze</td></tr><tr><td>hugetlb</td><td>控制大页内存</td><td>hugetlb.*</td></tr><tr><td>rdma</td><td>控制远程直接内存访问</td><td>rdma.*</td></tr><tr><td>perf_event</td><td>控制性能监控</td><td>perf_event.*</td></tr><tr><td>devices</td><td>控制设备访问</td><td>devices.*</td></tr><tr><td>net_cls/net_prio</td><td>控制网络数据包分类和优先级</td><td>net_cls., net_prio.</td></tr></tbody></table><p>上述各个控制器有若干关键接口文件，用来实现相应的资源限制，比如我们上面的例子使用 <code>memory.max</code> 限制进程最大内存使用。下面是全部控制器的关键接口文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ubuntu @ vm-01 in /sys/fs/cgroup/mygroup [15:56:35]</span>
$ ll
total <span class="token number">0</span>
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.controllers
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.events
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.freeze
--w------- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.kill
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.max.depth
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.max.descendants
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:43 cgroup.procs
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.stat
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.subtree_control
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.threads
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cgroup.type
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.idle
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.max
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.max.burst
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.pressure
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpuset.cpus
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpuset.cpus.effective
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpuset.cpus.partition
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpuset.mems
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpuset.mems.effective
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.stat
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.uclamp.max
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.uclamp.min
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.weight
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 cpu.weight.nice
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 io.max
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 io.pressure
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 io.prio.class
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 io.stat
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 io.weight
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:28 memory.current
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.events
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.events.local
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.high
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.low
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:35 memory.max
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.min
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.numa_stat
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.oom.group
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.pressure
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.stat
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.swap.current
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.swap.events
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.swap.high
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 memory.swap.max
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 pids.current
-r--r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 pids.events
-rw-r--r-- <span class="token number">1</span> root root <span class="token number">0</span> Mar <span class="token number">17</span> <span class="token number">15</span>:56 pids.max

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 cgroup 丰富的控制器，我们可以实现如下功能：</p><ul><li>资源限制，比如限制内存的使用、文件系统缓存的大小等。</li><li>优先级控制，通过对 cpu、io 等资源的分配，可以控制不同进程的优先级。</li><li>审计，可以统计进程的资源使用情况，比如 cpu 使用时间、内存使用情况等。</li><li>进程管理，比如可以通过 freeze 接口文件来控制组内进程的挂起与恢复。</li></ul><h3 id="控制组-control-group" tabindex="-1"><a class="header-anchor" href="#控制组-control-group" aria-hidden="true">#</a> 控制组（control group）</h3><p>控制组（control group）就是针对一组资源做限制的组合了。通常一个控制组内可以根据需求设置不同的控制器，然后将进程或者线程加入到控制组中，从而实现特定进程的资源进行限制。</p><h3 id="层级结构" tabindex="-1"><a class="header-anchor" href="#层级结构" aria-hidden="true">#</a> 层级结构</h3><p>控制组可以组织成一个树状的层级结构，从而实现更精细的资源限制。</p><p>cgroup v2 对层级结构进行了精简，最开始通常只有根控制组，位于 <code>/sys/fs/cgroup</code> 目录下，我们可以通过创建新目录的方式创建新的控制组，比如我们上面的例子创建 <code>/sys/fs/cgroup/mygroup</code> 目录，就是创建了一个新的控制组。</p><p>子系统控制组可以从父控制组继承资源限制并可以继续细化，但只能做进一步的资源限制，而不能放宽限制。控制组通过两个文件来控制自身以及子控制组所能设置的资源限制：</p><ul><li><code>cgroup.controllers</code>：控制组可以使用的控制器。</li><li><code>cgroup.subtree_control</code>：子控制组可以继承的控制器。</li></ul><p>可以通过 +，- 符号来表示在控制组中启用或禁用某个控制器，比如下面的例子，在 <code>cg1</code> 控制组中禁用 <code>memory</code> 控制器，启用 <code>cpu</code> 控制器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;+cpu -memory&#39;</span> <span class="token operator">&gt;</span> /sys/fs/cgroup/cg1/cgroup.subtree_control
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下图是官网提供的图例，通过上述两个文件，对不同的服务进行精细的资源限制。</p>`,16)),s("p",null,[n[6]||(n[6]=s("img",{src:"https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/cgroup-v2-02.png",alt:""},null,-1)),n[7]||(n[7]=a(" 图片来自：",-1)),s("a",d,[n[5]||(n[5]=a("cgroup2",-1)),p(e)])]),n[12]||(n[12]=t(`<h3 id="任务-task" tabindex="-1"><a class="header-anchor" href="#任务-task" aria-hidden="true">#</a> 任务（task）</h3><p>任务（task）就是进程或者线程，可以加入到控制组中。在 cgroup v2 中，任务加入到控制组的方式有两种：</p><ol><li>通过 <code>cgroup.procs</code> 文件将进程 ID 写入到控制组中，从而将进程加入到控制组中。</li><li>通过 <code>cgroup.threads</code> 文件将线程 ID 写入到控制组中，从而将线程加入到控制组中。</li></ol><p>下面是使用 <code>cgroup.procs</code> 将进程加入到控制组中的例子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将进程 ID 写入到控制组中</span>
<span class="token builtin class-name">echo</span> <span class="token number">118058</span> <span class="token operator">&gt;</span> /sys/fs/cgroup/mygroup/cgroup.procs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个进程只能处于一个控制组中。</p><h3 id="文件系统" tabindex="-1"><a class="header-anchor" href="#文件系统" aria-hidden="true">#</a> 文件系统</h3><p>cgroup 是</p>`,8))])}const h=o(u,[["render",b],["__file","docker-cgroups.html.vue"]]);export{h as default};
