import{_ as l,r as i,c as o,o as p,b as a,a as r,d as s,e as t}from"./app-C-eiXR-Q.js";const d={},u={href:"https://datatracker.ietf.org/doc/html/rfc7235",target:"_blank",rel:"noopener noreferrer"},c={href:"https://datatracker.ietf.org/doc/html/rfc2617",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Authorization",target:"_blank",rel:"noopener noreferrer"},v={href:"https://datatracker.ietf.org/doc/html/rfc2069",target:"_blank",rel:"noopener noreferrer"},m={href:"https://datatracker.ietf.org/doc/html/rfc2617",target:"_blank",rel:"noopener noreferrer"},g={href:"https://datatracker.ietf.org/doc/html/rfc2617",target:"_blank",rel:"noopener noreferrer"},k={href:"https://datatracker.ietf.org/doc/html/rfc6750",target:"_blank",rel:"noopener noreferrer"},h={href:"https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",target:"_blank",rel:"noopener noreferrer"};function f(A,e){const n=i("ExternalLinkIcon");return p(),o("div",null,[e[28]||(e[28]=a("h1",{id:"身份认证",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#身份认证","aria-hidden":"true"},"#"),s(" 身份认证")],-1)),e[29]||(e[29]=a("p",null,"本篇我们对常用的身份认证协议做简要的梳理，包括主流的 HTTP 相关认证协议以及证书密钥对、新兴的 WebAuthn 认证。",-1)),e[30]||(e[30]=a("h2",{id:"http-协议认证",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#http-协议认证","aria-hidden":"true"},"#"),s(" HTTP 协议认证")],-1)),a("p",null,[a("a",u,[e[0]||(e[0]=s("RFC 7235",-1)),t(n)]),e[1]||(e[1]=s(" 中定义了 HTTP 协议的认证框架，要求在支持 HTTP 协议的服务器，如果访问服务的身份验证失败，需要返回 401 Unauthorized 或 407 Proxy Authentication Required 状态码，并告知客户端应该采用何种方案提供凭证信息，收到响应后客户端按要求加入认证凭据信息后才能继续访问。",-1))]),e[31]||(e[31]=r(`<div class="language-code line-numbers-mode" data-ext="code"><pre class="language-code"><code># 响应头
WWW-Authenticate: &lt;认证方案&gt; realm=&lt;保护区域的描述信息&gt;
Proxy-Authenticate: &lt;认证方案&gt; realm=&lt;保护区域的描述信息&gt;

# 请求头
Authorization: &lt;认证方案&gt; &lt;凭证内容&gt;
Proxy-Authorization: &lt;认证方案&gt; &lt;凭证内容&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个认证流程如下：</p><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/http-auth-01.png" alt="" width="450" height="600"> <img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/http-auth-02.png" alt="" width="450" height="600"></p><p>在上述认证框架的基础上，HTTP 提出了不同的认证方式。</p><h3 id="http-basic-摘要认证" tabindex="-1"><a class="header-anchor" href="#http-basic-摘要认证" aria-hidden="true">#</a> HTTP Basic &amp; 摘要认证</h3>`,5)),a("p",null,[a("a",c,[e[2]||(e[2]=s("RFC 2617",-1)),t(n)]),e[3]||(e[3]=s(" 提出了 Basic 和 Digest Access（摘要认证）两种方式，我们先来看下 Basic，其认证流程如下：",-1))]),a("ul",null,[e[11]||(e[11]=a("li",null,[s("将用户名密码用冒号间隔做拼接，格式为 "),a("code",null,"username:password"),s("。")],-1)),e[12]||(e[12]=a("li",null,[s("对拼接后的字符串进行 Base64 编码，比如 "),a("code",null,"Base64(admin:12345)"),s(" 得到 "),a("code",null,"YWRtaW46MTIzNDU="),s("。")],-1)),a("li",null,[e[5]||(e[5]=s("将编码后的字符串添加 ",-1)),e[6]||(e[6]=a("code",null,"Basic",-1)),e[7]||(e[7]=s(" 标识后放到 HTTP 头 ",-1)),a("a",b,[e[4]||(e[4]=s("Authorization",-1)),t(n)]),e[8]||(e[8]=s(" 中，最终结果为 ",-1)),e[9]||(e[9]=a("code",null,"Authorization: Basic YWRtaW46MTIzNDU=",-1)),e[10]||(e[10]=s("，然后向服务端请求。",-1))]),e[13]||(e[13]=a("li",null,[s("如果认证通过，则返回 200 响应码。否则按照上述框架要求的，响应 401 并且返回响应头 "),a("code",null,'WWW-Authenticate: Basic realm="Dev", charset="UTF-8"'),s("。")],-1))]),e[32]||(e[32]=a("p",null,"可以看到 Basic 认证对密码只是做了编码，并没有加密处理，因此使用 Basic 认证时必须结合 TLS 加密传输一起使用。Basic 更多用于系统内部之间一些组件的访问，在实际生产系统中很少使用。",-1)),a("p",null,[a("a",v,[e[14]||(e[14]=s("RFC2069",-1)),t(n)]),e[16]||(e[16]=s(" 提出了 Digest Access 摘要认证，后续由 ",-1)),a("a",m,[e[15]||(e[15]=s("RFC 2617",-1)),t(n)]),e[17]||(e[17]=s(" 做了一系列的增强，算是对 Basic 的改进，其认证流程如下：",-1))]),e[33]||(e[33]=r(`<ul><li>认证失败，服务端返回 401 以及 <code>WWW-Authenticate</code> 头如下。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>WWW-Authenticate: Digest <span class="token assign-left variable">realm</span><span class="token operator">=</span><span class="token string">&quot;testrealm@host.com&quot;</span>,
                        <span class="token assign-left variable">qop</span><span class="token operator">=</span><span class="token string">&quot;auth,auth-int&quot;</span>,
                        <span class="token assign-left variable">nonce</span><span class="token operator">=</span><span class="token string">&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;</span>,
                        <span class="token assign-left variable">opaque</span><span class="token operator">=</span><span class="token string">&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有特殊要求，其计算的流程如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HA1 = MD5(username:realm:password)
HA2 = MD5(method:digestURI)
response = MD5(HA1:nonce:HA2)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4)),a("p",null,[e[19]||(e[19]=s("其中，nonce 是服务端返回的盐值，method 是请求方法，digestURI 为请求 URI。",-1)),a("a",g,[e[18]||(e[18]=s("RFC 2617",-1)),t(n)]),e[20]||(e[20]=s(" 提出了 qop(quality of protection，保护质量) 对计算方式提出了更复杂的要求，改进后的计算流程如下：",-1))]),e[34]||(e[34]=r(`<ul><li><p>客户端生成自己的盐值，然后做哈希操作 <code>HA1 = MD5(MD5(username:realm:password):nonce:cnonce)</code>。</p></li><li><p>如果 qop 包含了 <code>auth-init</code>，则 <code>HA2 = MD5(method:digestURI:MD5(entityBody))</code>，entityBody 代表整个请求体。</p></li><li><p>最后<code>response = MD5(HA1:nonce:nonceCount:cnonce:qop:HA2)</code>。计算完成后客户端将值加入到 <code>Authorization</code> 请求头中，示例如下：</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /dir/index.html HTTP/1.0
Host: localhost
Authorization: Digest <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">&quot;Mufasa&quot;</span>,
                     <span class="token assign-left variable">realm</span><span class="token operator">=</span><span class="token string">&quot;testrealm@host.com&quot;</span>,
                     <span class="token assign-left variable">nonce</span><span class="token operator">=</span><span class="token string">&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;</span>,
                     <span class="token assign-left variable">uri</span><span class="token operator">=</span><span class="token string">&quot;/dir/index.html&quot;</span>,
                     <span class="token assign-left variable">qop</span><span class="token operator">=</span>auth,
                     <span class="token assign-left variable">nc</span><span class="token operator">=</span>00000001,
                     <span class="token assign-left variable">cnonce</span><span class="token operator">=</span><span class="token string">&quot;0a4f113b&quot;</span>,
                     <span class="token assign-left variable">response</span><span class="token operator">=</span><span class="token string">&quot;6629fae49393a05397450978507c4ef1&quot;</span>,
                     <span class="token assign-left variable">opaque</span><span class="token operator">=</span><span class="token string">&quot;5ccc069c403ebaf9f0171e9517f40e41&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到摘要认证通过盐值、MD5 哈希的方式对用户名密码传输做了一定程度的加密，但其实最终加密后的强度还是取决于密码的强度，如果密码强度较弱其依然有泄露的风险，另外这里也没有办法避免中间人攻击。</p><h4 id="bearer-oauth-2-0-认证" tabindex="-1"><a class="header-anchor" href="#bearer-oauth-2-0-认证" aria-hidden="true">#</a> Bearer（OAuth 2.0）认证</h4>`,4)),a("p",null,[a("a",k,[e[21]||(e[21]=s("RFC 6750",-1)),t(n)]),e[22]||(e[22]=s(" 描述了基于 OAuth 2.0 的认证授权方式，它要求使用 ",-1)),e[23]||(e[23]=a("code",null,"Bearer Token（承载令牌）",-1)),e[24]||(e[24]=s(" 的方式进行认证。",-1))]),e[35]||(e[35]=r(`<p>客户端在获取令牌成功后，需要将令牌放到 <code>Authorization</code> 请求头中，格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Authorization: Bearer &lt;token&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>OAuth 2.0 协议当初主要是为了对第三方授权而实现的，其同时设计身份认证和授权，这个我们后面在详细介绍。</p><h2 id="form-认证" tabindex="-1"><a class="header-anchor" href="#form-认证" aria-hidden="true">#</a> Form 认证</h2><p>因为身份认证通常是应用系统的业务逻辑的一部分，虽然 HTTP 协议提供了基本的认证框架，但在大多数情况下，我们需要自行实现认证流程。最常见的方式就是通过 HTML 表单提交用户名和密码，然后服务端验证成功后返回一个凭据给客户端，客户端在后续的请求中将凭据放到 HTTP 请求头中。这在万维网中被称为 Web 认证，因为最常见的方式就是通过表单登录，也叫做表单认证（Form-based Authentication）。</p><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/form-login.png" alt="" width="400" height="400"></p>`,6)),a("p",null,[e[26]||(e[26]=s("表单认证并没有一个标准的规范规范，因此通常由产品和工程师根据业务需求自行设计实现，在设计方案时可以参考 ",-1)),a("a",h,[e[25]||(e[25]=s("OWASP Authentication Cheat Sheet",-1)),t(n)]),e[27]||(e[27]=s(" 中的建议。",-1))]),e[36]||(e[36]=r(`<h2 id="web-webauthn-认证" tabindex="-1"><a class="header-anchor" href="#web-webauthn-认证" aria-hidden="true">#</a> Web WebAuthn 认证</h2><h2 id="证书密钥对" tabindex="-1"><a class="header-anchor" href="#证书密钥对" aria-hidden="true">#</a> 证书密钥对</h2><p>上述认证方式都是基于用户名密码或者用户生物特征等方式进行认证的，这在ToC（面向消费者）场景下是比较常见的方式，但在其他场景下，比如系统内部的服务间通信、API 调用，机构和机构之前的通信，则需要其他的解决方案。最常用的就是数字证书和密钥对认证。</p><p>通过非对称加密的方式，我们可以生成公钥和私钥，我们将私钥安全保存，然后将公钥分发出去。通过私钥加密的数据只有使用公钥才能解密，这样同时解决了身份认证和数据加密的问题。但这种方式无法避免中间人攻击，因此通常需要结合<strong>数字证书</strong>来使用。</p><p>我们需要一个权威证书机构（CA，Certificate Authority）来颁发证书，证书中包含了公钥和一些其他信息，比如证书的有效期、颁发者等。通信双方在拿到证书后，可以向 CA 机构验证证书的合法性，验证通过后就可以使用公钥进行加密通信，从而保证通信的安全性。</p><p>目前网站和应用系统中使用的 HTTPS 通信以及云原生的下的 mTLS（双向 TLS）认证都是基于证书密钥对的方式。</p><p>传统网站的 HTTPS 单向认证流程如下：</p><ol><li>我们在浏览器访问网站，发起 HTTPS 请求。</li><li>服务端收到请求后，返回自己的证书给浏览器。</li><li>浏览器验证证书的合法性，如果合法则继续请求，否则返回错误。</li><li>浏览器使用证书中的公钥加密请求数据，并发送给服务端。</li></ol><p>可以看到这里主要是浏览器客户端去验证服务端的证书是否合法，也就是验证我们访问的网站是否是真实合法的。而在 mTLS 双向认证中，除了客户端验证服务端的证书外，服务端也会验证客户端的证书是否合法，流程如下：</p><ol><li>客户端请求服务端</li><li>服务端返回其 TLS 证书</li><li>客户端验证服务端证书合法性</li><li>客户端提供其 TLS 证书</li><li>服务端验证客户端证书合法性</li><li>验证成功，双方使用各自的公钥进行加密通信。</li></ol><p>在云原生环境以及 Zero Trust 安全架构理念的指导下，mTLS 几乎已经成为服务间通信的的必备安全认证方式。通常在企业内部，我们可以通过自签名证书的方式来生成 CA 和证书密钥对，下面我们用 OpenSSL 命令工具来演示这个过程：</p><ul><li>生成 CA 私钥和证书</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl genrsa <span class="token parameter variable">-out</span> ca.key <span class="token number">2048</span>
openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-new</span> <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-key</span> ca.key <span class="token parameter variable">-sha256</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-out</span> ca.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>生成服务端私钥和证书签名请求（CSR）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl genrsa <span class="token parameter variable">-out</span> server.key <span class="token number">2048</span>
openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server.key <span class="token parameter variable">-out</span> server.csr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>生成服务端证书</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> server.crt <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-sha256</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>生成客户端私钥和证书签名请求（CSR）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl genrsa <span class="token parameter variable">-out</span> client.key <span class="token number">2048</span>
openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> client.key <span class="token parameter variable">-out</span> client.csr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>生成客户端证书</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl x509 <span class="token parameter variable">-req</span> <span class="token parameter variable">-in</span> client.csr <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> client.crt <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-sha256</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,21))])}const x=l(d,[["render",f],["__file","auth.html.vue"]]);export{x as default};
