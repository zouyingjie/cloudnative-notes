import{_ as l,r as s,c as i,o as d,a,b as e,d as o,e as t}from"./app-C-eiXR-Q.js";const p={},u={href:"https://github.com/Netflix/eureka",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/alibaba/nacos",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/hashicorp/consul",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/Kong/kong",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/traefik/traefik",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/coredns/coredns",target:"_blank",rel:"noopener noreferrer"};function x(N,r){const n=s("ExternalLinkIcon");return d(),i("div",null,[r[19]||(r[19]=a('<h1 id="服务注册与发现" tabindex="-1"><a class="header-anchor" href="#服务注册与发现" aria-hidden="true">#</a> 服务注册与发现</h1><p>服务之间是需要互相通信的，在传统单体模式下，我们可以通过 <code>IP:Port</code> 形式的配置告知目标服务的地址和端口。但在分布式微服务架构下，尤其是基于容器的。</p><p>因此我们需要提供一种机制，让服务能够自动发现彼此并进行通信。</p><p>服务在部署完成后就需要互相通信了，在传统模式下我们经常需要手动配置 <code>ip:port</code> 来定位其他服务，这种方式不仅繁琐而且容易出错，在微服务架构频繁更新变动的情况下，这种方式显得尤为不适用，我们需要一种新的机制，能够让服务之间及时的定位到彼此，这就引入了服务注册与发现机制。</p><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/250829-service-discovery.jpg" alt=""></p><h2 id="服务的注册模式" tabindex="-1"><a class="header-anchor" href="#服务的注册模式" aria-hidden="true">#</a> 服务的注册模式</h2><h2 id="注册中心的实现" tabindex="-1"><a class="header-anchor" href="#注册中心的实现" aria-hidden="true">#</a> 注册中心的实现</h2><p>目前实现注册中心的方式有三类：</p>',8)),e("ul",null,[e("li",null,[e("p",null,[r[3]||(r[3]=e("strong",null,"专用的服务注册与发现工具",-1)),r[4]||(r[4]=o("：这类以 ",-1)),e("a",u,[r[0]||(r[0]=o("Eureka",-1)),t(n)]),r[5]||(r[5]=o("、",-1)),e("a",f,[r[1]||(r[1]=o("Nacos",-1)),t(n)]),r[6]||(r[6]=o("、",-1)),e("a",b,[r[2]||(r[2]=o("Consul",-1)),t(n)]),r[7]||(r[7]=o(" 等为代表，提供了完整的服务注册与发现解决方案。",-1))])]),r[18]||(r[18]=e("li",null,[e("p",null,"**分布式 KV **")],-1)),e("li",null,[e("p",null,[r[10]||(r[10]=e("strong",null,"基于 API 网关的服务发现",-1)),r[11]||(r[11]=o("：这类通过 API 网关来实现服务的注册与发现，网关负责将请求转发到具体的服务实例上，常见的有 ",-1)),e("a",g,[r[8]||(r[8]=o("Kong",-1)),t(n)]),r[12]||(r[12]=o("、",-1)),e("a",k,[r[9]||(r[9]=o("Traefik",-1)),t(n)]),r[13]||(r[13]=o(" 等。",-1))])]),e("li",null,[e("p",null,[r[15]||(r[15]=e("strong",null,"基于 DNS 的服务发现",-1)),r[16]||(r[16]=o("：这类通过 DNS 解析来实现服务的注册与发现，服务实例在启动时将自己的地址信息注册到 DNS 中，常见的有 ",-1)),e("a",m,[r[14]||(r[14]=o("CoreDNS",-1)),t(n)]),r[17]||(r[17]=o(" 等。",-1))])])])])}const v=l(p,[["render",x],["__file","discovery.html.vue"]]);export{v as default};
