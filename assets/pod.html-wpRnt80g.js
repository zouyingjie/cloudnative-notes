import{_ as l,r as i,c as o,o as u,a as p,b as s,d as a,e as t}from"./app-C-eiXR-Q.js";const c={},r={href:"https://hub.docker.com/r/kubernetes/pause",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.usenix.org/system/files/conference/hotcloud16/hotcloud16_burns.pdf",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.usenix.org/sites/default/files/conference/protected-files/hotcloud16_slides_burns.pdf",target:"_blank",rel:"noopener noreferrer"},v={href:"https://learning.oreilly.com/library/view/kubernetes-patterns/9781492050278/ch15.html#idm46631050718360",target:"_blank",rel:"noopener noreferrer"},m={href:"https://learning.oreilly.com/library/view/kubernetes-patterns/9781492050278/ch17.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://learning.oreilly.com/library/view/kubernetes-patterns/9781492050278/ch16.html",target:"_blank",rel:"noopener noreferrer"};function y(g,n){const e=i("ExternalLinkIcon");return u(),o("div",null,[n[14]||(n[14]=p('<h1 id="pod-那些事" tabindex="-1"><a class="header-anchor" href="#pod-那些事" aria-hidden="true">#</a> Pod 那些事</h1><h3 id="_1-为什么需要-pod" tabindex="-1"><a class="header-anchor" href="#_1-为什么需要-pod" aria-hidden="true">#</a> 1. 为什么需要 Pod</h3><p>Kubernetes 作为容器编排工具，其操作的单位并不是单个容器，而是抽象出了 Pod 的概念。它使用 Pod 作为最小的可部署和管理单元，一个 Pod 包含一个或多个容器，这些容器可以 <code>共享网络和存储</code>。</p><p>Kubernetes 之所以使用 Pod 而不是容器为管理单位，主要是为了解决两个问题：</p><ul><li>协同执行</li><li>协同调度</li></ul><p>容器本身是单进程模型，其应用的 PID 为 1，没有管理多个进程的能力。在实际应用中，往往存在着需要紧密协作的进程，比如业务服务和对应日志收集服务，它们必须要运行在同一机器上共享存储、网络等资源，而 Pod 其实就是一组共享了网络、存储、IPC、UTS 以及时间的的容器，它们只有 PID 和文件 namespace 是默认隔离的。</p><p>与此同时，在跨机器的集群中，这些关系紧密的进程必须被部署到同一台机器上。如果以容器为调度单位，对资源的要求就只能在容器上设置，此时当多个容器需要协同调度时，资源越紧张，容器被调度到不同机器的可能性越大。</p><p>如果以 Pod 为原子单位进行调度，对资源的设置可以定义在 Pod 上，此时只需要以 Pod 为单位统一调度即可，不需要在考虑单个容器的情况。</p>',8)),s("p",null,[n[1]||(n[1]=a("具体到机器层面，Pod 是一个逻辑上的概念，本质就是一组容器，Kubernetes 使用 ",-1)),s("a",r,[n[0]||(n[0]=a("pause",-1)),t(e)]),n[2]||(n[2]=a("（一个只有几百 KB 的非常轻量级的镜像）先创建一个基础容器，将网络、存储等资源准备好，然后在创建应用容器，并关联网络和存储。",-1))]),n[15]||(n[15]=p(`<p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/pod.png" alt="" width="450" height="200"></p><p>Pod 可以由用户直接创建，也可以通过 Controller 对象创建。实际使用中，一般都是由用户使用 Deployment，Job，StatefulSet 等控制器对象，基于其 PodTemplate 创建。另外也可以由 kubelet 直接创建并管理，这类 Pod 称为 <strong>StaticPod</strong>，像 kube-apiserver、kube-scheduler、kube-controller manager 这些控制组件都是 StaticPod。</p><h3 id="_2-pod-生命周期与状态" tabindex="-1"><a class="header-anchor" href="#_2-pod-生命周期与状态" aria-hidden="true">#</a> 2. Pod 生命周期与状态</h3><p>Pod 在创建完成后，会被调度部署并运行，在这期间会有不同的状态，通常可以通过 <code>kubectl get pods [podName] -o yaml</code> 来查看 Pod 的详细状态信息。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>$ kubectl get pods nginx<span class="token punctuation">-</span>deployment<span class="token punctuation">-</span>96b9d695<span class="token punctuation">-</span>47trr  <span class="token punctuation">-</span>o yaml
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">pod-template-hash</span><span class="token punctuation">:</span> 96b9d695
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>deployment<span class="token punctuation">-</span>96b9d695<span class="token punctuation">-</span>47trr
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default

<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest
    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
    <span class="token punctuation">...</span>
<span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">conditions</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-24T07:19:53Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> PodReadyToStartContainers
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-24T07:19:42Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> Initialized
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-24T07:19:53Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> Ready
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-24T07:19:53Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> ContainersReady
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-24T07:19:41Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> PodScheduled
  <span class="token key atrule">containerStatuses</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">containerID</span><span class="token punctuation">:</span> containerd<span class="token punctuation">:</span>//92c96cebbfd61d8b164c5ffff068d2ce9749b1ade488006a2fdfc4f966b8cfca
    <span class="token key atrule">state</span><span class="token punctuation">:</span>
      <span class="token key atrule">running</span><span class="token punctuation">:</span>
        <span class="token key atrule">startedAt</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-24T07:19:53Z&quot;</span>

  <span class="token key atrule">hostIP</span><span class="token punctuation">:</span> 172.19.0.13
  <span class="token key atrule">hostIPs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">ip</span><span class="token punctuation">:</span> 172.19.0.13
  <span class="token key atrule">phase</span><span class="token punctuation">:</span> Running
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-pod-阶段-phase" tabindex="-1"><a class="header-anchor" href="#_2-1-pod-阶段-phase" aria-hidden="true">#</a> 2.1 Pod 阶段（Phase）</h4><p>Pod的状态是一个 PodStatus 对象，在 Pod 定义中是 status 字段， 其中包含一个 <code>pod.status.phase</code> 字段表示当前的阶段，取值如下：</p><table><thead><tr><th>状态值</th><th>描述</th></tr></thead><tbody><tr><td>Pending</td><td>表示 Pod 对象已被创建保存在 etcd 中，但有一个或多个容器还不能被顺利创建。当等待调度或者拉取镜像时一般处在该状态。</td></tr><tr><td>Running</td><td>Pod 已经调度到某一节点并且所有容器都已经创建成功，并且至少有一个容器正在运行或者正在启动/重启。</td></tr><tr><td>Succeed</td><td>所有容器都正常运行并退出，并且不会重启。一般在运行一次性任务时最为常见。</td></tr><tr><td>Failed</td><td>所有容器已终止，并且至少有一个以不正常状态退出。此时我们一般需要通过查看 Pod 信息或日志来调试问题。</td></tr><tr><td>Unknown</td><td>异常状态，Pod 状态无法被 kube-apiserver 获取到。一般是 Pod 所在节点与 kube-apiserver 通信出现异常导致的。</td></tr></tbody></table><h4 id="_2-2-pod-状况-conditions" tabindex="-1"><a class="header-anchor" href="#_2-2-pod-状况-conditions" aria-hidden="true">#</a> 2.2 Pod 状况 （Conditions）</h4><p>除了 <code>status.phase</code> 字段表示 Pod 的当前阶段外，Pod 还有一组 <code>PodConditions</code> 对象，对应字段是 <code>pod.status.conditions</code> 数组字段，该对象用来描述 Pod 处于某个 phase 的具体原因，主要有下面几个值：</p><ul><li><strong>PodScheduled</strong>：Pod 已经被调度到指定节点。</li><li><strong>PodReadyToStartContainers</strong>：自 1.25 版本引入，在 1.29 版本进入 Beta 阶段。表示 Pod 已经创建且完成了网络配置，可以启动容器。</li><li><strong>ContainersReady</strong>：Pod内所有容器全部就绪。</li><li><strong>Initialized</strong>：所有的 InitContainer（初始化容器） 已经成功启动。</li><li><strong>Ready</strong>：Pod 达到 ready 状态，可以作为 endpoints 给 Service 代理对外提供服务列表。通常到这一步我们的服务就可以被用户访问了。</li></ul><p>上述每个 Condition 对象都有下面几个字段：</p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>类型名称， 上述名称之一</td></tr><tr><td>status</td><td>True， False， Unkonwn 指示这个状况是否就绪</td></tr><tr><td>lastProbeTime</td><td>最后一个探测状况的时间戳</td></tr><tr><td>lastTransitionTime</td><td>Pod上一次状况变换的时间戳</td></tr><tr><td>reason</td><td>状况最后一次变化的原因，Machine-readable</td></tr><tr><td>message</td><td>状况最后一次变化的原因，Human-readable</td></tr></tbody></table><p>下面是一个 Pod 状况的示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">conditions</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-21T12:38:09Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> PodReadyToStartContainers
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-21T12:38:13Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> Initialized
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-21T12:38:29Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> Ready
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-21T12:38:29Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> ContainersReady
  <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>
    <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-21T12:37:58Z&quot;</span>
    <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">&quot;True&quot;</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> PodScheduled

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-容器状态" tabindex="-1"><a class="header-anchor" href="#_2-3-容器状态" aria-hidden="true">#</a> 2.3 容器状态</h4><p>除了 Pod 本身，Pod 中的每个容器也会有不同的状态，由 <code>status.containerStatuses</code> 字段表示，主要有下面三个值：</p><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td>Waiting</td><td>等待状态。表示容器仍在执行启动所需的操作，比如拉取镜像、注入数据等。</td></tr><tr><td>Running</td><td>运行状态。表示容器正常运行，如果容器配置了 postStart 命令，该命令已经执行并结束了</td></tr><tr><td>Terminated</td><td>终止状态。容器完成任务或者执行失败，如果容器配置了 preStop 命令，必须在该命令执行完成后进行该状态，换句话说，preStop 会阻塞 container 的终止。</td></tr></tbody></table><p>下面是一个示例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">status</span><span class="token punctuation">:</span>
  <span class="token key atrule">containerStatuses</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">containerID</span><span class="token punctuation">:</span> containerd<span class="token punctuation">:</span>//31a7910f38f6766e88e4ddd03bfccb79208653cabea19b11b1e065400e7e1657
    <span class="token key atrule">image</span><span class="token punctuation">:</span> quay.io/prometheus<span class="token punctuation">-</span>operator/prometheus<span class="token punctuation">-</span>config<span class="token punctuation">-</span>reloader<span class="token punctuation">:</span>v0.84.1
    <span class="token key atrule">imageID</span><span class="token punctuation">:</span> quay.io/prometheus<span class="token punctuation">-</span>operator/prometheus<span class="token punctuation">-</span>config<span class="token punctuation">-</span>reloader@sha256<span class="token punctuation">:</span>f9e2a3b8550b0b643c285fc45132fde845910012db6d850d3e04dd462db037b4
    <span class="token key atrule">lastState</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>reloader
    <span class="token key atrule">ready</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">restartCount</span><span class="token punctuation">:</span> <span class="token number">0</span>
    <span class="token key atrule">started</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">state</span><span class="token punctuation">:</span>
      <span class="token key atrule">running</span><span class="token punctuation">:</span>
        <span class="token key atrule">startedAt</span><span class="token punctuation">:</span> <span class="token string">&quot;2025-08-21T12:38:27Z&quot;</span>
    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/prometheus/config
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-重启策略-restartpolicy" tabindex="-1"><a class="header-anchor" href="#_2-4-重启策略-restartpolicy" aria-hidden="true">#</a> 2.4 重启策略（restartPolicy）</h4><p>我们可以为 Pod 中的容器设置重启策略，有三个取值，</p><ul><li><strong>Always（默认值）</strong>：只要不在运行状态就自动重启。</li><li><strong>OnFailure</strong>：当容器异常退出时自动重启。</li><li><strong>Never</strong>：从不重启。</li></ul><p>当容器需要重启时，kubelet 会采取指数退避原则，逐渐增加重启的间隔时长，但最长不超过 5 分钟。</p><h4 id="_2-5-生命周期回调" tabindex="-1"><a class="header-anchor" href="#_2-5-生命周期回调" aria-hidden="true">#</a> 2.5 生命周期回调</h4><p>Kubernetes 容器可以配置 postStart 和 preStop 命令。这是容器在发生状态变化时可以触发的一系列 hook 操作：</p><ul><li><p><strong>postStart</strong>：在容器创建后立即执行，即 ENTRYPOINT 执行之后执行，但并不保证顺序，postStart 执行时 ENTRYPOINT 命令可能尚未结束。postStart 会阻塞容器状态变化，在 postStart 执行完成前，容器的状态不会设置为 Running。</p></li><li><p><strong>preStop</strong>：在容器被杀死进入 Terminated 状态前执行，会阻塞容器杀死进程。Kubernetes 仅在 Pod 终止时执行 preStop，在完成时不会调用。 Hook 的实现方式有两种：</p></li><li><p><strong>exec</strong>：执行一段命令。</p></li><li><p><strong>http</strong>：执行一个请求。</p></li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle<span class="token punctuation">-</span>demo
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>container
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>
      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>
        <span class="token key atrule">exec</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;echo Hello from the postStart handler &gt; /usr/share/message&quot;</span><span class="token punctuation">]</span>
      <span class="token key atrule">preStop</span><span class="token punctuation">:</span>
        <span class="token key atrule">exec</span><span class="token punctuation">:</span>
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/usr/sbin/nginx&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;-s&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;quit&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-pod-探针" tabindex="-1"><a class="header-anchor" href="#_3-pod-探针" aria-hidden="true">#</a> 3. Pod 探针</h3><p>探针是由 kubelet 发起的一种容器诊断行为，可以用来检测 Pod 中的容器的健康情况。Kubernetes 中主要有三种探针：</p><ul><li><p><strong>livenessProbe</strong>：存活探针，检查容器的健康状态，以决定是否重启容器。</p></li><li><p><strong>readinessProbe</strong>：就绪探针，用来检测容器是否准备好接收外部流量。该探针执行成功后 Pod 的细分状态就会变为 Ready，此时 Pod 可以作为 endpoints 给 Service 进行代理，供外部访问。</p></li><li><p><strong>startupProbe</strong>：启动探针，来判断容器是否启动，该类型探针会屏蔽上述两种探针，从而避免因为容器启动过长导致的死循环问题。如果失败则会重启容器。</p></li></ul><p>每种探针有四种实现形式，分别是：</p><ul><li><strong>exec</strong>：容器内运行指定命令，如果返回为 0 说明探测成功。</li><li><strong>tcpSocket</strong>：用 TCP 协议对容器的 IP:Port 执行检查，如果能够成功建立连接则说明探测成功。</li><li><strong>httpGet</strong>：对容器的 IP:Port 的某个路径执行 HTTP Get 请求，如果响应码大于 200 且小于 400，说明探测成功。</li><li><strong>grpc</strong>：在 1.23 版本引入并在 1.27 版本达到稳定态，通过 gPRC 执行远程调用，容器需要实现相应的健康检查协议，如果响应为 <code>SERVING</code> 说明探测成功。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> goproxy
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> goproxy
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> goproxy
    <span class="token key atrule">image</span><span class="token punctuation">:</span> k8s.gcr.io/goproxy<span class="token punctuation">:</span><span class="token number">0.1</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>
    <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>
      <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>
      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>
    <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>
      <span class="token key atrule">tcpSocket</span><span class="token punctuation">:</span>
        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
      <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">15</span>
      <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>什么时候启用livenessProbe</strong></p><p>存活探针主要的目的是探活，确定容器还在正常提供服务。如果容器进程在出现问题时可以自行崩溃，此时是不需要存活探针的，kubelet 会探测到容器的状态并基于 restartPolicy 执行相应的操作。</p><p>但有时候容器进程虽然没有挂掉，但其实已经无法提供服务了，比如遇到死锁。从进程检查的角度它是没问题的，并不会执行重启操作，此时我们需要通过存活探针去真正的访问服务，确保其真正可用。</p><p><strong>什么时候启用 readinessProbe</strong></p><p>就绪探针决定的是容器是否已经启动就绪并可以接收外部的流量，因此如果某个需要接收外部流量的的容器进程启动较慢，可以设置 readinessProbe 来确认容器是否已经就绪。</p><p>比如对于 Java/Spring 应用，其启动往往较慢，为了实现滚动更新，可以设置通过设置 HTTP GET 形式的就绪探针探活 <code>/actuator/health</code> 接口来确认容器是否已经就绪，只有检测到就绪后 Kubernetes 才会杀死旧的 Pod，这样可以防止旧的 Pod 被杀掉，新服务还没启动起来导致的服务不可用。</p><p><strong>什么时候启用 startupProbe</strong></p><p>针对容器进程启动较慢的情况，可以设置启动指针。避免因为长时间未启动引发 livenessProbe 探测失败导致重启，陷入不断重启的“死循环”中。</p><h3 id="_4-init-container" tabindex="-1"><a class="header-anchor" href="#_4-init-container" aria-hidden="true">#</a> 4. Init container</h3><p>Init Container 是一种特殊容器，在 Pod 内的应用容器启动之前运行，一般用来执行初始化操作，比如安装应用镜像中不存在的实用工具和脚本。每个 Pod 可以有一个或多个先于应用容器启动的 Init Container。</p><p>Init Container 容器有两个特点：</p><ul><li>按顺序执行</li><li>它们总是运行到完成，每个 InitContainer 必须在下一个容器启动前成功完成。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
 <span class="token key atrule">name</span><span class="token punctuation">:</span> www
 <span class="token key atrule">labels</span><span class="token punctuation">:</span>
   <span class="token key atrule">app</span><span class="token punctuation">:</span> www
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
 <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> download
   <span class="token key atrule">image</span><span class="token punctuation">:</span> execlb/git
   <span class="token key atrule">command</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> git
   <span class="token punctuation">-</span> clone
   <span class="token punctuation">-</span> https<span class="token punctuation">:</span>//github.com/mdn/beginner<span class="token punctuation">-</span>html<span class="token punctuation">-</span>site<span class="token punctuation">-</span>scripted
   <span class="token punctuation">-</span> /var/lib/data
   <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/data
     <span class="token key atrule">name</span><span class="token punctuation">:</span> source
 <span class="token key atrule">containers</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> run
   <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/centos/httpd
   <span class="token key atrule">ports</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
   <span class="token comment"># Shared volume with main container</span>
   <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
   <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/www/html
     <span class="token key atrule">name</span><span class="token punctuation">:</span> source
 <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
 <span class="token punctuation">-</span> <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
   <span class="token key atrule">name</span><span class="token punctuation">:</span> source
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong></p><ol><li>InitContainer 不支持 lifecycle、livenessProbe、readinessProbe 和 startupProbe， 因为它们必须在 Pod 就绪之前运行完成。</li><li>只有所有 InitContainer 都执行成功， Pod才能切换到Ready condition；只要任意一个失败就会触发 Pod 的 restartPolicy。</li><li>Pod 重新启动时，所有的 InitContainer 会重新执行一遍，因此 InitContainer 的执行结果应该是幂等的。</li><li>InitContainer 执行时， Pod 的 condition 会标识 Initialized 为 false, 但是 Phase 是Pending。</li><li>在 Container上设置 livenessProbe 和在Pod上 activeDeadlineSeconds可以避免 init container 死循环失败，activeDeadlineSeconds 将会作用于所有的Init 容器。</li></ol><p><strong>资源计算</strong></p><p>InitContainer 中可以设置对CPU/内存资源的 request/limit ，因此会影响到 Pod 的调度处理。Pod 对资源的有效 request/limit 取决于下面两者中的最大值：</p><ul><li>所有应用容器的 request/limit 之和</li><li>InitContainer 中 request/limit 的最大值</li></ul><p>尽量使 InitContainer 的 request/limit 小于应用容器的 request/limit。因为 Pod 调度是基于有效 request/limit 资源的，如果在 InitContainer 中申请过多资源，但应用容器实际用不了这么多，就会造成资源浪费。</p><h3 id="_5-sidecar-container" tabindex="-1"><a class="header-anchor" href="#_5-sidecar-container" aria-hidden="true">#</a> 5. Sidecar Container</h3><p>Sidecar Container 是一种辅助容器，通常用于扩展主容器的能力，比如日志收集、监控、数据处理等，是 Kubernetes 中常见的一种设计模式。K8s 在 1.28 版本引入了原生的 SideCar 容器支持，通过在 InitContainer 中设置 <code>restartPolicy: Always</code> 将特定 InitContainer 转为 Sidecar container。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp
          <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine<span class="token punctuation">:</span>latest
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;sh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;while true; do echo &quot;logging&quot; &gt;&gt; /opt/logs.txt; sleep 1; done&#39;</span><span class="token punctuation">]</span>
          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data
              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /opt
      <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> logshipper
          <span class="token key atrule">image</span><span class="token punctuation">:</span> alpine<span class="token punctuation">:</span>latest
          <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always
          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;sh&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tail -F /opt/logs.txt&#39;</span><span class="token punctuation">]</span>
          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data
              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /opt
      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data
          <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-disruption" tabindex="-1"><a class="header-anchor" href="#_6-disruption" aria-hidden="true">#</a> 6. Disruption</h3><p>PDB (Pod disruption budgets) 用来设置 Pod 的最小可用副本数和最大不可用副本数。比如一个Deployment 有 <code>.spec.replicas:5</code> 表示在任何时间他将有5个副本。如果设置最小可用数为 2，最大不可用数为 1，那么在进行滚动更新时，Kubernetes 至少会保留 2 个可用副本，同时最多只会有 1 个副本不可用。</p><p>PDB 主要是为了在计划宕机时保护某些关键服务，防止误操作导致不可用，但无法保证计划外的宕机。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> policy/v1beta1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> PodDisruptionBudget
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> zk<span class="token punctuation">-</span>pdb
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> zk
  <span class="token key atrule">minAvailable</span><span class="token punctuation">:</span> <span class="token number">4</span>
  <span class="token key atrule">maxUnavailable</span><span class="token punctuation">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-pod-容器命令与参数" tabindex="-1"><a class="header-anchor" href="#_7-pod-容器命令与参数" aria-hidden="true">#</a> 7. Pod 容器命令与参数</h3><p>Pod 的定义中可以为 Container 指定启动命令和参数，格式如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> command<span class="token punctuation">-</span>demo
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">purpose</span><span class="token punctuation">:</span> demonstrate<span class="token punctuation">-</span>command
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> command<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>container
    <span class="token key atrule">image</span><span class="token punctuation">:</span> debian
    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;printenv&quot;</span><span class="token punctuation">]</span>
    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;HOSTNAME&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;KUBERNETES_PORT&quot;</span><span class="token punctuation">]</span>
    <span class="token comment"># command: [&quot;/bin/sh&quot;]</span>
    <span class="token comment"># args: [&quot;-c&quot;, &quot;while true; do echo hello; sleep 10;done&quot;]</span>
  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> OnFailure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pod 中定义的 command 和 args 会覆盖掉 Dockerfile 中定义的启动命令，其覆盖关系如下：</p><p><strong>K8S command/args VS. Docker Entrypoint/Cmd</strong><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/k8s-cmd-args.png" alt="在这里插入图片描述"></p><h3 id="_8-pod-的启动与终止" tabindex="-1"><a class="header-anchor" href="#_8-pod-的启动与终止" aria-hidden="true">#</a> 8. Pod 的启动与终止</h3><p>当创建一个 Pod 创建时，K8s 各个组件启动 Pod 的工作作过程如下：</p><ol><li><p>创建 Pod：</p><ol><li>如果是外部发起请求创建 Pod，api-server 会执行检查，检查无误后 Pod 会被存储到 etcd。</li><li>如果是 Deployment 等控制器组件，则 controller 会执行状态拟合，创建期望数量的 Pod 存入 etcd。</li></ol></li><li><p>Scheduler 调度器发现新的未调度 Pod 后，基于资源需求、节点亲和、污点容忍等规则，计算出其调度节点，然后修改 Pod 的 <code>.spec.nodeName</code> 字段为对应的节点名，然后存回 etcd。</p></li><li><p>对应节点上的 kubelet 检测到有新的 Pod 调度到该节点，执行如下操作：</p><ol><li>向容器运行时比如 contained 发送请求，创建 infra 容器。</li><li>容器运行时调用 CNI 网络插件初始化 Pod 的网络命名空间。</li><li>如果存在 initContainer，kubelet 会请求运行时按顺序创建 init container。</li><li>kubelet 并发请求 CRI 创建 <code>spec.containers</code> 下定义的容器。</li></ol></li><li><p>kubelet 监控容器，收集容器数据并上报给 api-server。</p></li></ol><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/pod_startup.jpg" alt="" width="800" height="900"></p><p>当 Pod 被删除时，K8s 各个组件删除 Pod 的工作流程如下：</p><ol><li>用户/controller 提交删除请求，默认会有 30s 的宽限期。</li><li>api-server 根据宽限期计算终止时间，将 Pod 标记为 terminating。</li><li>kubelet 监控到 Pod 被标记为 terminating 后，开始终止 Pod 中的容器。 <ol><li>api-server 从 Service 的 endpoint 中移除 Pod 的 endpoint，从而不在接收请求。</li><li>如果有 preStop hook，此时会开始执行</li><li>kubelet 向容器发送 TERM 信号</li></ol></li><li>如果超过宽限期后，Pod 中的容器还没有终止，kubelet 会向容器发送 KILL 信号强制终止。</li><li>容器运行时通知 kubelet 容器已经终止。</li><li>kubelet 清理临时目录、网络配置等。</li><li>删除完成</li></ol><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/pod-termination.png" alt="" width="800" height="900"></p><h3 id="_9-pod-容器设计模式" tabindex="-1"><a class="header-anchor" href="#_9-pod-容器设计模式" aria-hidden="true">#</a> 9. Pod 容器设计模式</h3><p>很多时候若干个进程是需要紧密运行在同一台主机上的，比如 Linux 进程组下的进程。在容器编排调度中，对于某些超亲密的容器进程，它们也是必须被紧密的调度运行在同一主机环境中。类似于 Kubernetes 的 Pod、Nomad 中的 task-group 都是对这种超亲密关系的抽象。</p><p>Google 的两位技术人员对基于容器的设计模式总结了论文和PPT：</p>`,75)),s("ul",null,[s("li",null,[n[4]||(n[4]=a("论文：",-1)),s("a",d,[n[3]||(n[3]=a("Design patterns for container-based distributed systems",-1)),t(e)])]),s("li",null,[n[6]||(n[6]=a("课件：",-1)),s("a",k,[n[5]||(n[5]=a("https://www.usenix.org/sites/default/files/conference/protected-files/hotcloud16_slides_burns.pdf",-1)),t(e)])])]),n[16]||(n[16]=s("h4",{id:"sidecar",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sidecar","aria-hidden":"true"},"#"),a(" SideCar")],-1)),n[17]||(n[17]=s("p",null,"边车容器用来扩展和增强主容器的功能。在基于容器的分布式系统中，容器作为打包、重用的基本单位，其设计一般是符合单一职责原则的。此时如果我们需要一些额外的功能，可以通过 SideCar 容器实现。比如下载主容器所需的文件，收集主容器进程运行产生的日志等。",-1)),n[18]||(n[18]=s("p",null,[s("img",{src:"https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/sidecar-pod-02.png",alt:"在这里插入图片描述"})],-1)),s("p",null,[n[8]||(n[8]=a("图片来自：",-1)),s("a",v,[n[7]||(n[7]=a("Kubernetes Patterns",-1)),t(e)])]),n[19]||(n[19]=p(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>app
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> app
    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.io/centos/httpd    
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/www/html       
      <span class="token key atrule">name</span><span class="token punctuation">:</span> git
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> poll
    <span class="token key atrule">image</span><span class="token punctuation">:</span> axeclbr/git               
    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/data       
      <span class="token key atrule">name</span><span class="token punctuation">:</span> git
    <span class="token key atrule">env</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> GIT_REPO
      <span class="token key atrule">value</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/mdn/beginner<span class="token punctuation">-</span>html<span class="token punctuation">-</span>site<span class="token punctuation">-</span>scripted
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;sh&quot;</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;-c&quot;</span>
    <span class="token punctuation">-</span> <span class="token string">&quot;git clone $(GIT_REPO) . &amp;&amp; watch -n 600 git pull&quot;</span>
    <span class="token key atrule">workingDir</span><span class="token punctuation">:</span> /var/lib/data
  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SideCar 容器的使用有如下几个好处：</p><ul><li><strong>节约资源</strong>：容器作为资源分配的单位，可以将资源优先配置给主容器，而 sidecar 容器可以配置较少的资源，避免其资源占用过多影响主进程。</li><li><strong>职责分离</strong>：容器作为打包的单位，主容器和 sidecar 容器是可以分开单独开发并打包的。</li><li><strong>方便重用</strong>：容器也是重用的单位，sidecar 可以用来辅助不同的主容器。</li><li><strong>错误隔离</strong>：当某个容器出现问题时，可以单独的进行降级、升级、回滚等，尽量不影响其他容器的运行。</li></ul><h4 id="ambassador" tabindex="-1"><a class="header-anchor" href="#ambassador" aria-hidden="true">#</a> Ambassador</h4><p>Ambassador 大使模式，是一种特殊的 SideCar，用于代理容器对外的请求、操作。比如主容器需要访问数据库获取资源，对于主容器而言，其看到的始终是与本地通信，所有的通信细节都由大使容器实现。</p><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/sidecar-ambassador-01.png" alt="在这里插入图片描述"></p>`,6)),s("p",null,[n[10]||(n[10]=a("图片来自：",-1)),s("a",m,[n[9]||(n[9]=a("Kubernetes Patterns",-1)),t(e)]),n[11]||(n[11]=a(" 下面是一个简单的示例，主容器产生的日志会经由 localhost:8080 的路径发送给 Ambassador 容器，然后经由 Ambassador 发送给不同的存储媒介。",-1))]),n[20]||(n[20]=p(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> random<span class="token punctuation">-</span>generator
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> random<span class="token punctuation">-</span>generator
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> k8spatterns/random<span class="token punctuation">-</span>generator<span class="token punctuation">:</span><span class="token number">1.0</span>            
    <span class="token key atrule">name</span><span class="token punctuation">:</span> main
    <span class="token key atrule">env</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> LOG_URL                                    
      <span class="token key atrule">value</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9009</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span>
      <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP
  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> k8spatterns/random<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>log<span class="token punctuation">-</span>ambassador 
    <span class="token key atrule">name</span><span class="token punctuation">:</span> ambassador
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="adapter" tabindex="-1"><a class="header-anchor" href="#adapter" aria-hidden="true">#</a> Adapter</h4><p>适配器模式是另外一种特殊的 SideCar，和大使模式相反。大使模式是屏蔽的外部的变化，对主容器提供一致对外访问体验。</p><p>而适配器模式则是屏蔽容器内部的变化，对外提供统一的访问模式。最常见的例子就是监控 API，比如 Prometheus，外界不用关心容器内部是怎样实现的，只需要访问固定的 API 获取指标就可以了。</p><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/sidecar-adapter-01.png" alt="在这里插入图片描述"></p>`,5)),s("p",null,[n[13]||(n[13]=a("图片来自：",-1)),s("a",b,[n[12]||(n[12]=a("Kubernetes Patterns",-1)),t(e)])]),n[21]||(n[21]=p(`<p>下面是一个 Adapter 的示例，Adapter用到了一个 <code>nginx/nginx-prometheus-exporter</code> 的一个镜像，该适配器会把 Nginx 的 stub staus 页转成 Prometheus 的 metrics，并放了9113端口和默认的 <code>/mterics</code> 的访问路径。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>
  <span class="token key atrule">labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">app</span><span class="token punctuation">:</span> adapter<span class="token punctuation">-</span>pattern
  <span class="token key atrule">name</span><span class="token punctuation">:</span> adapter<span class="token punctuation">-</span>pattern
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> adapter
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> adapter<span class="token punctuation">-</span>pattern
  <span class="token key atrule">strategy</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> adapter<span class="token punctuation">-</span>pattern
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>default<span class="token punctuation">-</span>conf<span class="token punctuation">-</span>volume
        <span class="token key atrule">configMap</span><span class="token punctuation">:</span>
          <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>default<span class="token punctuation">-</span>conf
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx
        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.19.2
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
        <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/nginx/conf.d
          <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>default<span class="token punctuation">-</span>conf<span class="token punctuation">-</span>volume
          <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> adapter
        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx/nginx<span class="token punctuation">-</span>prometheus<span class="token punctuation">-</span>exporter<span class="token punctuation">:</span>0.8.0
        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;-nginx.scrape-uri&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost/nginx_status&quot;</span><span class="token punctuation">]</span>
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">9113</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span> <span class="token punctuation">:</span> debug
        <span class="token key atrule">image</span><span class="token punctuation">:</span> nicolaka/netshoot
        <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/bash&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-c&quot;</span><span class="token punctuation">]</span>
        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;while true; do sleep 60; done&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2))])}const P=l(c,[["render",y],["__file","pod.html.vue"]]);export{P as default};
