import{_ as i,r as s,c as p,o as d,b as e,a as o,d as r,e as l}from"./app-C-eiXR-Q.js";const u={},a={href:"https://fidoalliance.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://icyfenix.cn/architect-perspective/general-architecture/system-security/authentication.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://en.wikipedia.org/wiki/Kerberos_(protocol)",target:"_blank",rel:"noopener noreferrer"},b={href:"https://openid.net/connect/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.apereo.org/programs/software/cas",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.apereo.org/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://en.wikipedia.org/wiki/SAML",target:"_blank",rel:"noopener noreferrer"},A={href:"https://en.wikipedia.org/wiki/Access_control_list",target:"_blank",rel:"noopener noreferrer"},T={href:"https://en.wikipedia.org/wiki/Role-based_access_control",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Attribute-based_access_control",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.oasis-open.org/xacml/3.0/xacml-3.0-core-spec-os-en.html",target:"_blank",rel:"noopener noreferrer"},x={href:"https://oauth.net/2/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://tools.ietf.org/html/rfc6265#section-4.1",target:"_blank",rel:"noopener noreferrer"},w={href:"https://tools.ietf.org/html/rfc7519",target:"_blank",rel:"noopener noreferrer"};function B(O,n){const t=s("ExternalLinkIcon");return d(),p("div",null,[n[35]||(n[35]=e("h1",{id:"方案概览",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#方案概览","aria-hidden":"true"},"#"),r(" 方案概览")],-1)),n[36]||(n[36]=e("p",null,"大多数系统都是面向用户的，因此身份认证和权限管理是系统设计的重要组成部分。本篇我们对常见的认证授权方案做简要介绍，后续文章在对具体的技术方案进行介绍时会详细展开。",-1)),n[37]||(n[37]=e("h2",{id:"身份认证",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#身份认证","aria-hidden":"true"},"#"),r(" 身份认证")],-1)),n[38]||(n[38]=e("p",null,[r("当用户访问系统时，首先要解决的就是"),e("strong",null,"你是谁"),r("的问题，也就是身份认证。从认证方式来看主要有三种：")],-1)),e("ul",null,[n[4]||(n[4]=e("li",null,[e("p",null,[e("strong",null,"用户名密码"),r("：这应该是最普遍的方式，用户通常需要先注册一个账号并设置密码，并用于后续的登录。")])],-1)),n[5]||(n[5]=e("li",null,[e("p",null,[e("strong",null,"密钥对证书"),r("：现代分布式微服务架构下，系统的不同组件也需要通信，服务之间的通信也需要保证安全性以及进行身份认证，此时用户名密码的认证方式就不再适用。此时可以通过数字证书的方式进行身份认证，比如 K8s、Istio 中使用的 mTLS 机制。MegaEase 的全栈监控系统就使用了密钥对证书的方式，通过对用户颁发自签名的 TLS 证书，用户环境上报指标时，服务端会校验其客户端证书，用来校验身份的正确性和识别是哪个租户的指标数据。")])],-1)),e("li",null,[e("p",null,[n[1]||(n[1]=e("strong",null,"WebAuthn",-1)),n[2]||(n[2]=r("：这是由 ",-1)),e("a",a,[n[0]||(n[0]=r("FIDO",-1)),l(t)]),n[3]||(n[3]=r(" 联盟领导制定的认证协议，它不在使用传统的用户名密码校验，，而是使用生物识别（指纹、人脸、虹膜、声纹）或者实体密钥（以 USB、蓝牙、NFC 连接的物理密钥容器）来作为身份凭证。",-1))])])]),e("p",null,[n[7]||(n[7]=r("另外从认证发生的场景来看，也可以分为三类（分类来源：",-1)),e("a",g,[n[6]||(n[6]=r("凤凰架构",-1)),l(t)]),n[8]||(n[8]=r("）：",-1))]),n[39]||(n[39]=o('<ul><li><p><strong>在通信信道进行认证</strong>：在通信建立连接之前，先证明你是谁。典型场景就是 TLS/SSL 协议认证，在通信开始前需要校验对方的证书是否可信。</p></li><li><p><strong>在通信协议上认证</strong>：在请求资源之前，先证明你是谁。比如基于 HTTP 协议的各种认证方式。</p></li><li><p><strong>在通信内容上认证</strong>：在使用服务之前，先证明你是谁。典型的就是我们的 Web 认证，这应该是我们日常使用最多的认证方式。作为程序员的我们通常需要设计一个认证服务来解决这个问题。</p></li></ul><h3 id="密码处理" tabindex="-1"><a class="header-anchor" href="#密码处理" aria-hidden="true">#</a> 密码处理</h3><h5 id="密码的存储" tabindex="-1"><a class="header-anchor" href="#密码的存储" aria-hidden="true">#</a> 密码的存储</h5><p>在使用用户名密码进行身份认证时，服务端通常要存储用户名的密码，为了防止密码泄露，应该尽量避免明文存储，而是在存储前对密码进行处理。常见的处理方式有三种：</p><ul><li><p><strong>编码（Encoding）</strong>：对密码进行编码后存储，比如 Base64 编码。但这类编码方式是可以被逆向还原的，因此不推荐使用。</p></li><li><p><strong>加密（Encryption）</strong>：对密码使用密钥进行加密，只要密钥不泄露，密码就是安全的。</p></li><li><p><strong>哈希（Hashing）</strong>：对密码进行哈希运算。哈希运算是一种单向运算，无法通过哈希值反推出原始密码，密码的微小变化都会导致哈希值的巨大变化，因此哈希运算是一种非常安全的密码处理方式。因此在实际使用中，通常都会使用哈希的方式来存储密码。</p></li></ul><p>当然，哈希运算也会遇到一些攻击问题，比如暴力破解，彩虹表攻击等，为此在实际实现中，通常使用更高级的哈希算法，比如 bcrypt 算法，并引入盐值（Salt）来增加密码的安全性。</p><h3 id="多因认证-mfa" tabindex="-1"><a class="header-anchor" href="#多因认证-mfa" aria-hidden="true">#</a> 多因认证（MFA）</h3><p>在用户名密码认证的基础上，为了进一步提高认证的安全性，我们可以引入 2FA（Two-Factor Authentication）或 MFA（Multi-Factor Authentication），即双因认证或者多因认证。在实际使用中，通常是用户名密码 + OTP（One-Time Password，一次性密码）的方式，OTP 可以有多种实现方式，比如：</p><ul><li>短信/邮件验证码，这是我们最常见的 OTP 方式了。</li><li>设备消息推送，比如 Apple 设备的推送通知。</li><li>专门的 OTP 硬件</li><li>专门的 OTP 应用，比如 Google Authenticator。</li></ul><h3 id="单点登录-sso" tabindex="-1"><a class="header-anchor" href="#单点登录-sso" aria-hidden="true">#</a> 单点登录（SSO）</h3><p>单点登录也是认证过程的一个常见场景，其旨在解决用户在多个系统或应用之间频繁登录的问题，下面是一些常见的方案：</p>',11)),e("ul",null,[e("li",null,[e("p",null,[e("strong",null,[e("a",f,[n[9]||(n[9]=r("Kerberos",-1)),l(t)])]),n[10]||(n[10]=r("：MIT设计的SSO协议，基于对称密码学，并需要一个值得信赖的第三方。其广泛用于操作系统认证，如被Windows 2000和后续的操作系统作为默认的认证方法。",-1))])]),e("li",null,[e("p",null,[e("strong",null,[e("a",b,[n[11]||(n[11]=r("OpenID Connect",-1)),l(t)])]),n[12]||(n[12]=r("：基于 OAuth 2.0 + JWT 的认证协议，提供了更丰富的用户信息，功能非常的全面，是目前很流行的 SSO 方案。",-1))])]),e("li",null,[e("p",null,[e("strong",null,[e("a",S,[n[13]||(n[13]=r("CAS (Central Authentication Service)",-1)),l(t)])]),n[15]||(n[15]=r("：该协议由耶鲁大学设计，现在由 ",-1)),e("a",k,[n[14]||(n[14]=r("Apereo",-1)),l(t)]),n[16]||(n[16]=r(" 社区维护，通常用于 Web 服务的单点登录，实现相对简单易用，可以用在简单的场景。",-1))])]),e("li",null,[e("p",null,[e("strong",null,[e("a",C,[n[17]||(n[17]=r("SAML (Security Assertion Markup Language)",-1)),l(t)])]),n[18]||(n[18]=r("：基于 XML 在身份提供者 (IdP) 和服务提供者 (SP) 之间传递认证信息，可以使用众多的场景，但协议较为复杂。",-1))])])]),n[40]||(n[40]=e("h2",{id:"授权管理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#授权管理","aria-hidden":"true"},"#"),r(" 授权管理")],-1)),n[41]||(n[41]=e("p",null,[r("识别了用户身份之后，第二步要解决的就是"),e("strong",null,"你能做什么"),r("的问题，也就是授权管理。主流的授权管理方式下面几种：")],-1)),e("ul",null,[e("li",null,[e("p",null,[e("strong",null,[e("a",A,[n[19]||(n[19]=r("ACL（Access Control List）",-1)),l(t)])]),n[20]||(n[20]=r("：访问控制列表，通过列表的方式定义哪些用户可以访问哪些资源。在操作系统内部的文件系统中使用的比较广泛，比如 Linux 的文件系统，可以提供比传统的 ugo 方式更细粒度的权限控制。",-1))])]),e("li",null,[e("p",null,[e("strong",null,[e("a",T,[n[21]||(n[21]=r("RBAC（Role-Based Access Control）",-1)),l(t)])]),n[22]||(n[22]=r("：基于角色的访问控制，通过抽象出 Role（角色）的概念，将权限赋予不同的角色，然后将角色与用户绑定，实现灵活的授权管理。像 Kubernetes 提供了 Role/ClusterRole、RoleBinding/ClusterRoleBinding 对象支持标准的 RBAC 授权管理； Spring Security 也提供了基于角色的授权管理。通常 RBAC 可以满足大部分的授权管理需求。",-1))])]),e("li",null,[e("p",null,[e("strong",null,[e("a",m,[n[23]||(n[23]=r("ABAC（Attribute-Based Access Control）",-1)),l(t)])]),n[25]||(n[25]=r("：基于属性的访问控制，通过引入 Attribute（属性）的概念进行了更细粒度的授权管理。不过实现起来通常需要定义大量的属性，通常比 RBAC 更复杂。具体的实现标准是 ",-1)),e("a",h,[n[24]||(n[24]=r("XACML",-1)),l(t)]),n[26]||(n[26]=r("，不同语言会有相应的类库实现。",-1))])])]),n[42]||(n[42]=e("p",null,"上面几种方案基本都是在单个系统中进行授权管理的，如果要涉及第三方系统的访问，比如我们的服务需要用户授权从某网盘同步数据，这时候总不能让用户把账号密码交给我们，这会造成用户的极大不便。相反，我们可以获取一个可过期的、有权限限制的 token（访问令牌），我们可以拿着这个令牌去访问用户的数据，这样就避免了用户密码的泄露。",-1)),n[43]||(n[43]=e("p",null,"解决第三方授权的方案主要有：",-1)),e("ul",null,[n[29]||(n[29]=e("li",null,[e("p",null,[e("strong",null,"OAuth 1.0"),r("：用来进行第三方委托首选的早期协议，目前已经被 OAuth 2.0 取代。")])],-1)),e("li",null,[e("p",null,[e("strong",null,[e("a",x,[n[27]||(n[27]=r("OAuth 2.0",-1)),l(t)])]),n[28]||(n[28]=r("：目前解决应用系统向第三方授权的主流协议，提供了授权码、简化模式、密码模式、客户端模式等多种授权方式，后续我们会详细介绍。",-1))])])]),n[44]||(n[44]=e("h2",{id:"凭据管理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#凭据管理","aria-hidden":"true"},"#"),r(" 凭据管理")],-1)),n[45]||(n[45]=e("p",null,[r("用户在登录认证成功后，服务端通常会生成一个凭据（Credential）返回给客户端，客户端在后续的请求中，将凭据放到 "),e("code",null,"Authorization"),r(" 请求头中，服务端通过该凭据来识别用户身份。主流的凭据管理有 Cookie-Session 机制和 JWT 证书两种。")],-1)),n[46]||(n[46]=e("p",null,[e("strong",null,"Cookie-Session 机制")],-1)),e("p",null,[n[31]||(n[31]=r("基于 HTTP 协议的 Cookie-Session 机制应该是最常见的凭据管理方式了。HTTP 本身是无状态的，为了维护用户的认证信息，维持客户端与服务端之间的会话状态，",-1)),e("a",v,[n[30]||(n[30]=r("RFC 6265",-1)),l(t)]),n[32]||(n[32]=r(" 定义了 Cookie 机制，允许服务端以键值对的方式向客户端发送信息，包括用户 ID 过期时间等信息，下面是一个示例：",-1))]),n[47]||(n[47]=o(`<blockquote><p>Set-Cookie: user_id=12345; Expires=Wed, 30 Mar 2025 12:00:00 GMT; Path=/; HttpOnly</p></blockquote><p>传统的 Cookie 机制会将 HTTP 请求头中携带一定的信息，并在客户端存储一段时间，这会导致安全隐患和不必要的传输开销。为此更常见的做法是将用户信息存储在服务端，然后生成一个 Session ID返回给客户端，客户端在后续的请求中，将 Session ID 放到 Cookie 中，服务端通过该 Session ID 来识别用户身份。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 登录请求的响应头
Set-Cookie: JSESSIONID=3AE8CDC301F3D6C65B11BC08E065B7F8; Path=/; HttpOnly

# 后续请求的请求头
cookie: JSESSIONID=3AE8CDC301F3D6C65B11BC08E065B7F8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际使用中通常会使用 Redis 作为缓存来存储 Session 信息，并使用 Redis 的过期时间来控制 Session 的过期时间。</p><p><strong>JWT 证书</strong></p>`,5)),e("p",null,[e("a",w,[n[33]||(n[33]=r("RFC 7519",-1)),l(t)]),n[34]||(n[34]=r(" 定义了 JWT（JSON Web Token），使用 BASE64 编码后再进行签名，最后生成 JWT Token 返回给客户端。和 Cookie-Session 机制相比，JWT 将用户信息存储在 Token 也就是客户端中，JWT 非常适合在分布式系统中作为一次性令牌使用，这样可以避免 Session 机制在分布式系统下的 CAP 问题。",-1))]),n[48]||(n[48]=o('<p>关于两者我们会在后续的文章中详细介绍。</p><h2 id="云原生下的认证与授权" tabindex="-1"><a class="header-anchor" href="#云原生下的认证与授权" aria-hidden="true">#</a> 云原生下的认证与授权</h2><p>在云原生架构下，服务网格（Service Mesh）作为基础设施层，通常会将业务无关的功能下沉到网格中，比如认证、授权、限流、熔断、监控等，这样可以让业务专注于业务逻辑的开发。</p><p>服务网格更多的是关注服务到服务之间的安全通信，比如 Istio 提供的对等身份认证和服务授权访问，可以</p><ul><li>基于 mTLS 的服务间通信的加密和认证，防止中间人攻击</li><li>基于服务、请求属性等要素，控制服务之间的授权访问</li></ul><p>在认证授权方面，用户身份和权限管理依然属于应用业务逻辑的一部分，需要微服务自身来实现，但后续的校验流程可以交给服务网格实现，比如通过使用 JWT 作为令牌时，可以将公钥放置在 SideCar 中，请求在进入应用之前在 SideCar 就可以实现，Istio 就采用了这种方式，流程如下图所示。对于授权，则可以通过 SideCar 与授权服务器交互的方式完成权限校验，但通常情况下，细粒度的权限校验通常还是交由服务来实现。</p><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/istio-jwt.png" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>上述只列举了笔者在工作学习中使用或者了解过的安全认证相关的技术，由于涉猎范围有限，后续只能对常用到的一些方案做更详细的介绍和相关实践。</p><p>有一点需要注意的是，虽然技术总是不断发展，但新技术并不完全是旧技术的替代，它们只是适用场景不同，在设计时有不同的 trade-off，作为技术人员，我们需要做的就是要了解技术发展的背景、trade-off 以及局限性，然后在项目设计时做出最合适的技术选型。</p>',10))])}const L=i(u,[["render",B],["__file","roadmap.html.vue"]]);export{L as default};
