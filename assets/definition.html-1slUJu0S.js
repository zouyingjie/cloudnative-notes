import{_ as i,r as o,c as p,o as r,a as l,b as s,d as a,e as t}from"./app-C-eiXR-Q.js";const u={},c={href:"https://www.f5.com/content/dam/f5/corp/global/pdf/ebooks/Migrating_to_Cloud-Native_Application_Architecutres_NGINX.pdf",target:"_blank",rel:"noopener noreferrer"},d={href:"https://12factor.net/zh_cn/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.infoq.com/articles/cloud-native-panel/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.vmware.com/topics/cloud-native",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/cncf/toc/blob/main/DEFINITION.md",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/cncf/toc/blob/main/DEFINITION.md",target:"_blank",rel:"noopener noreferrer"};function g(y,n){const e=o("ExternalLinkIcon");return r(),p("div",null,[n[22]||(n[22]=l('<h1 id="云原生的定义" tabindex="-1"><a class="header-anchor" href="#云原生的定义" aria-hidden="true">#</a> 云原生的定义</h1><h3 id="云计算的变迁" tabindex="-1"><a class="header-anchor" href="#云计算的变迁" aria-hidden="true">#</a> 云计算的变迁</h3><h3 id="云原生的早期定义" tabindex="-1"><a class="header-anchor" href="#云原生的早期定义" aria-hidden="true">#</a> 云原生的早期定义</h3>',3)),s("p",null,[n[1]||(n[1]=a("云原生（Cloud Native）的概念最早由 Pivotal 公司的技术产品经理 Matt Stine 提出，他在 ",-1)),s("a",c,[n[0]||(n[0]=a("Migrating to Cloud-Native Application Architectures",-1)),t(e)]),n[2]||(n[2]=a(" 一书中，将云原生的特性概括为以下几点：",-1))]),s("ul",null,[s("li",null,[n[4]||(n[4]=a("Twelve-Factor Applications 符合",-1)),s("a",d,[n[3]||(n[3]=a("软件 12 要素的应用",-1)),t(e)])]),n[5]||(n[5]=s("li",null,"Microservices 采用微服务架构",-1)),n[6]||(n[6]=s("li",null,"Self-Service Agile Architecture 自服务敏捷架构",-1)),n[7]||(n[7]=s("li",null,"API-Based Collaboration 基于 API 的协作",-1)),n[8]||(n[8]=s("li",null,"Antifragility 抗脆弱性",-1))]),s("p",null,[n[10]||(n[10]=a("2017 年，Matt Stine 在接受 InfoQ 的",-1)),s("a",k,[n[9]||(n[9]=a("采访(Defining Cloud Native: A Panel Discussion)",-1)),t(e)]),n[11]||(n[11]=a(" 时，对云原生的定义做了一定的修改，将云原生的特性总结为以下几点：",-1))]),n[23]||(n[23]=s("ul",null,[s("li",null,"Modularity (via Microservices) 基于微服务的模块化"),s("li",null,"Observability 可观测性"),s("li",null,"Deployability 可部署性"),s("li",null,"Testability 可测试性"),s("li",null,"Disposability 可处理性"),s("li",null,"Replaceability 可替换性")],-1)),s("p",null,[n[13]||(n[13]=a("之后 Pivotal（后被 VMWare 收购）将云原生",-1)),s("a",v,[n[12]||(n[12]=a("概括",-1)),t(e)]),n[14]||(n[14]=a("为如下几个要点：",-1))]),n[24]||(n[24]=l('<ul><li><strong>Containers/Kubernetes Ecosystem</strong>: 作为云原生的基石，为服务更高效的提供稳定可靠的运行环境。</li><li><strong>DevOps</strong>: 通过 DevOps 实践来促进开发和运维团队的协作，更好的交付高质量软件。</li><li><strong>CI/CD</strong>: 实现持续集成和持续交付的自动化流程。做到不停机快速迭代和高频发布。</li><li><strong>Microservices</strong>: 通过高内聚低耦合的微服务架构，加快软件的开发、发布、扩缩容速度。</li></ul><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/20250804-cloudnative-def.png" alt=""></p><h3 id="cncf-云原生定义" tabindex="-1"><a class="header-anchor" href="#cncf-云原生定义" aria-hidden="true">#</a> CNCF 云原生定义</h3>',3)),s("p",null,[n[16]||(n[16]=a("2015 年，Google 联合 Pivotal、Red Hat、IBM 等公司共同成立了云原生计算基金会（CNCF），旨在推动云原生技术的发展和普及，并对云原生做了更加标准化的定义，最新的 ",-1)),s("a",m,[n[15]||(n[15]=a("v1.1",-1)),t(e)]),n[17]||(n[17]=a(" 版本对云原生定义如下：",-1))]),n[25]||(n[25]=s("p",null,[s("strong",null,"英文版本")],-1)),n[26]||(n[26]=s("blockquote",null,[s("p",null,[a("Cloud native practices empower organizations to develop, build, and deploy workloads in computing environments (public, private, hybrid cloud) to meet their organizational needs at scale in a programmatic and repeatable manner. It is "),s("strong",null,"characterized by loosely coupled systems that interoperate in a manner that is secure, resilient, manageable, sustainable, and observable.")]),s("p",null,"Cloud native technologies and architectures typically consist of some combination of containers, service meshes, multi-tenancy, microservices, immutable infrastructure, serverless, and declarative APIs — this list is non-exhaustive.")],-1)),n[27]||(n[27]=s("p",null,[s("strong",null,"中文版本")],-1)),s("blockquote",null,[n[20]||(n[20]=s("p",null,"云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。",-1)),n[21]||(n[21]=s("p",null,"这些技术能够构建容错性好、易于管理和便于观察的松耦合系统。结合可靠的自动化手段，云原生技术使工程师能够轻松地对系统作出频繁和可预测的重大变更。",-1)),s("p",null,[n[19]||(n[19]=a("— ",-1)),s("a",b,[n[18]||(n[18]=a("CNCF Cloud Native Definition",-1)),t(e)])])]),n[28]||(n[28]=l(`<p>上述定义强调了云原生的 5 个核心技术：</p><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/20250804-cloudnative-01.jpg" alt=""></p><ul><li><strong>容器</strong>：基于容器技术和 Kubernetes 编排，为应用提供稳定的基础资源。</li><li><strong>服务网格</strong>：作为基础设施接管服务间的通信，并提供强大的服务治理、流量治理、可观测性等能力。</li><li><strong>微服务</strong>：将系统拆分为高内聚、低耦合、自包含的独立开发部署模块，提升系统的可维护性和可扩展性。</li><li><strong>不可变基础设施</strong>：应用只会重建，不会更新，每次部署都是全新的实例，确保系统的一致性和可靠性。</li><li><strong>声明式 API</strong>：使用描述性的语言来定义<strong>想要什么</strong>，而不是<strong>怎么做</strong>，比如下面是一个 Kubernetes YAML 文件的实例，它表示我希望部署一个名为 <code>my-app</code> 的应用，包含 3 个副本，每个副本运行在一个容器中，容器使用 <code>my-app-image:latest</code> 镜像，并暴露 80 端口，同时设置了一些环境变量和资源限制。至于如何实现是底层的 Kubernetes 系统来处理的，开发者不关心如何实现。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>
  <span class="token key atrule">selector</span><span class="token punctuation">:</span>
    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>
      <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app
  <span class="token key atrule">template</span><span class="token punctuation">:</span>
    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>
      <span class="token key atrule">labels</span><span class="token punctuation">:</span>
        <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app
    <span class="token key atrule">spec</span><span class="token punctuation">:</span>
      <span class="token key atrule">containers</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app<span class="token punctuation">-</span>container
        <span class="token key atrule">image</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>app<span class="token punctuation">-</span>image<span class="token punctuation">:</span>latest
        <span class="token key atrule">ports</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ENV_VAR
          <span class="token key atrule">value</span><span class="token punctuation">:</span> <span class="token string">&quot;value&quot;</span>
        <span class="token key atrule">resources</span><span class="token punctuation">:</span>
          <span class="token key atrule">requests</span><span class="token punctuation">:</span>
            <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">&quot;256Mi&quot;</span>
            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;500m&quot;</span>
          <span class="token key atrule">limits</span><span class="token punctuation">:</span>
            <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">&quot;512Mi&quot;</span>
            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="何以为云原生" tabindex="-1"><a class="header-anchor" href="#何以为云原生" aria-hidden="true">#</a> 何以为云原生</h3><p>可以看到云原生的定义也是一个不断演进的概念，其核心在于：充分利用云计算的弹性和灵活性，通过容器化、微服务架构、自动化运维等技术手段，实现应用的快速开发、部署和迭代，提供高可用、高性能、可扩展、可观测的系统。</p>`,6))])}const N=i(u,[["render",g],["__file","definition.html.vue"]]);export{N as default};
