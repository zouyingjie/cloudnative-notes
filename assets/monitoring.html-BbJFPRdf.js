import{_ as i,r as s,c as a,o as p,a as o,b as t,d as l,e as n}from"./app-C-eiXR-Q.js";const d={},u={href:"https://en.wikipedia.org/wiki/Apdex",target:"_blank",rel:"noopener noreferrer"},g={href:"https://megaease.cn/zh/docs/monitor/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/influxdata/telegraf",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.elastic.co/cn/beats",target:"_blank",rel:"noopener noreferrer"},b={href:"https://prometheus.io/docs/instrumenting/exporters/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://opentelemetry.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/oshi/oshi",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/dropwizard/metrics",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/open-telemetry/opentelemetry-java",target:"_blank",rel:"noopener noreferrer"},P={href:"https://megaease.com/zh/blog/2022/05/08/easeagent-observability-non-intrusive-observation-system/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://megaease.com/zh/blog/2021/08/24/a-spring-cloud-compatible-service-mesh/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/megaease/easeprobe",target:"_blank",rel:"noopener noreferrer"},A={href:"https://prometheus.io/docs/alerting/latest/overview/#alerting-overview",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.elastic.co/cn/kibana/alerting",target:"_blank",rel:"noopener noreferrer"},y={href:"https://grafana.com/docs/grafana/latest/alerting/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://www.influxdata.com/time-series-platform/telegraf/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.elastic.co/products/beats/filebeat",target:"_blank",rel:"noopener noreferrer"},T={href:"https://www.fluentd.org/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/megaease/easeagent",target:"_blank",rel:"noopener noreferrer"},J={href:"https://opentelemetry.io/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://kafka.apache.org/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://www.elastic.co/products/logstash",target:"_blank",rel:"noopener noreferrer"},D={href:"https://www.fluentd.org/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://www.elastic.co/products/elasticsearch/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://prometheus.io/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://www.influxdata.com/",target:"_blank",rel:"noopener noreferrer"},G={href:"https://grafana.com/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://prometheus.io/docs/alerting/latest/overview/#alerting-overview",target:"_blank",rel:"noopener noreferrer"},K={href:"https://www.elastic.co/cn/kibana/alerting",target:"_blank",rel:"noopener noreferrer"},V={href:"https://grafana.com/docs/grafana/latest/alerting/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://megaease.cn/zh/docs/monitor/",target:"_blank",rel:"noopener noreferrer"};function U(j,r){const e=s("ExternalLinkIcon");return p(),a("div",null,[r[92]||(r[92]=o('<h1 id="全栈监控系统架构" tabindex="-1"><a class="header-anchor" href="#全栈监控系统架构" aria-hidden="true">#</a> 全栈监控系统架构</h1><p>可观测性的目标就是尽可能的收集系统的运行数据，以便于对其进行分析和诊断。除了从数据层面可以分为指标、日志、追踪三种外。从系统架构层面也可分为三层：</p><ul><li><p><strong>基础层</strong>：对底层主机资源的监控。比如 CPU、GPU、内存、磁盘用量、磁盘IO、网络IO 、系统日志等。</p></li><li><p><strong>中间层</strong>：对中间件的监控。比如 MySQL、Redis、ElasticSearch、Nginx 等中间件的关键指标。</p></li><li><p><strong>应用层</strong> ：监控应用的指标。比如 JVM 指标、JDBC 指标、HTTP 的吞吐、响应时间和返回码分布等。当然也包括客户端的监控，比如移动客户端的性能监控。</p></li></ul><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/observability01.png" alt=""></p><p>我们知道分布式系统的架构和运维极其复杂，只有实现一个全栈监控系统，将上述各层的指标、日志、追踪数据收集并关联保存好，让它成为分布式系统的眼睛，我们才能更好的了解系统运行状态，及时发现问题，进而解决问题。</p><blockquote><p>一个分布式系统、一个自动化运维系统、或是一个Cloud Native的云化系统，最重要的事就是把监控系统做好，在把数据收集好的同时更重要的是把数据关联好。开发和运维才可能很快地定位故障，进而根据故障原因做出相应的（自动化）处置，将故障恢复或把故障控制在影响范围之内。 《左耳听风》</p></blockquote><h2 id="监控系统功能要求" tabindex="-1"><a class="header-anchor" href="#监控系统功能要求" aria-hidden="true">#</a> 监控系统功能要求</h2><p>一个好的监控系统，主要为两个场景服务：</p><ol><li><p><strong>体检</strong></p><ul><li><p><strong>容量管理</strong>。提供一个全局的系统运行时数据监控大盘，可以让工程师团队知道是否需要增加机器或是其它资源。</p></li><li><p><strong>性能管理</strong>。可以通过查看大盘，找到系统瓶颈，并有针对性的优化系统和相应代码。</p></li></ul></li><li><p><strong>急诊</strong></p><ul><li><p><strong>定位问题</strong>。可以快速的暴露并找到问题的发生点，帮助技术人员诊断问题。</p></li><li><p><strong>性能分析</strong>。当出现不预期的流量提升，可以快速的找到系统的瓶颈，并可以帮助开发人员深入代码。</p></li></ul></li></ol><p>具体需要有如下功能：</p><h3 id="全栈监控" tabindex="-1"><a class="header-anchor" href="#全栈监控" aria-hidden="true">#</a> 全栈监控</h3><p>做到对基础、中间件和应用层的指标、日志、链路追踪的整体监控。</p><h3 id="整体-sla-分析" tabindex="-1"><a class="header-anchor" href="#整体-sla-分析" aria-hidden="true">#</a> 整体 SLA 分析</h3><p>需要根据用户的 API 访问计算整体的 SLA。比如下面的一系列指标：</p><ul><li><strong>吞吐量</strong>：M1，M5，M15 的吞吐量，即最近 1、5、15 分钟的 QPS。</li><li><strong>响应时间</strong>：P99 、P95 、P90、P75、P50 等延时时长，</li><li><strong>错误率</strong>：2XX、3XX、4XX、5XX 的各自占比；最近 1、5、15 分钟的 400、500 错误请求数。</li><li><strong>Apdex（Application Performance Index)</strong> 指标</li></ul><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/apdex.png" alt="apdex" width="600" height="350"></p>',16)),t("p",null,[t("a",u,[r[0]||(r[0]=l("Apdex",-1)),n(e)]),r[1]||(r[1]=l(" 是工业界用来衡量系统运行是否健康的指标，它规定有三种状态来描述用户的使用体验：",-1))]),r[93]||(r[93]=o(`<ul><li><strong>满意（Satisfied）</strong>：请求服务响应时间小于某个阈值 T。</li><li><strong>可容忍（Tolerating）</strong>：请求服务响应时间高于 T，但低于一个可容忍值 F，通常 F = 4T。</li><li><strong>失望（Frustrated）</strong>：请求服务响应时间大于可容忍值 F。</li></ul><p>基于以上规定，Apdex 的计算公式如下：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>// 满意的请求数加上可容忍的请求数的一半，除以总的请求数。
Apdex = (Satisfied count + Tolerating count / 2) / Total count
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>假设我们系统有 100 个请求，满意响应时间为 200ms。这 100 个请求中：</p><ul><li>80 个请求响应时间小于 200ms，即满意的请求数为 80。</li><li>15 个请求响应时间在 200ms 到 800ms(4 * 200) 之间，即可容忍的请求数为 15。</li><li>5 个请求响应时间大于 800ms，即失望的请求数为 5。</li></ul><p>那么 Apdex 的值为：</p><div class="language-txt line-numbers-mode" data-ext="txt"><pre class="language-txt"><code>Apdex = (80 + 15 / 2) / 100 = 0.875
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般来说，Apdex 的值大于 0.9 时系统可以认为运行正常，用户体验良好；低于 0.8 时需要告警，并进行优化；在 0.5 以下时可以认为系统运行不正常，需要将服务实例下线。</p><h3 id="关联分析" tabindex="-1"><a class="header-anchor" href="#关联分析" aria-hidden="true">#</a> 关联分析</h3><p>监控系统需要对三层数据进行统一全面的关联、分析，并能够通过调用关系帮助我们定位故障的根因。</p><p>以一个报 500 的请求为例，我们能够通过链路追踪日志获取该请求的整个请求链路，链路中的所有服务、中间件以及对应的服务器信息都能关联查询出来。查询到链路中的每个 Span 时，对应的日志、指标都能关联展示出来。</p><p>下图是使用 MegaEase Cloud 云平台监控的一个微服务系统的调用链追踪展示以及点击某个 Span 时所能关联查询的所有数据。整个调用链的拓扑图、日志、请求、JDBC 等信息全部能关联查询出来。</p><ul><li>调用链拓扑图</li></ul><p><img src="https://megaease.cn/imgs/docs/ease.monitor.feature.toplogy.en.png" alt="调用链拓扑"></p><ul><li>Span 信息</li></ul><p><img src="https://megaease.cn/imgs/docs/ease.monitor.feature.ex.service.en.png" alt="点击 Span 后关联的日志、请求、JDBC 信息"></p><ul><li>Span 详情，包括日志、指标、请求、JDBC 等</li></ul><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/monitor-span-detail.jpg" alt="Span 详情"></p>`,18)),t("p",null,[r[3]||(r[3]=l("图片来自 ",-1)),t("a",g,[r[2]||(r[2]=l("MegaEase 官网",-1)),n(e)])]),r[94]||(r[94]=o('<h3 id="实时告警与自动处理" tabindex="-1"><a class="header-anchor" href="#实时告警与自动处理" aria-hidden="true">#</a> 实时告警与自动处理</h3><p>通过设置告警规则，当系统异常时能够及时的发出告警。在此基础上要有一定的自动故障处理能力，比如自动扩缩容、弹力处理等。</p><p>对于常见的指标，比如服务器的 CPU、内存、磁盘的用量，JVM 的 Memory、GC 等最好有默认的告警规则模版，每当有新的机器、服务上线时，能够自动生成告警规则。</p><h3 id="系统容量与性能分析" tabindex="-1"><a class="header-anchor" href="#系统容量与性能分析" aria-hidden="true">#</a> 系统容量与性能分析</h3><p>通过对过去一段时段的监控数据分析，获取系统的 SLA、负载、容量使用等情况，为系统的容量规划提供参考依据。</p><h2 id="监控系统技术架构" tabindex="-1"><a class="header-anchor" href="#监控系统技术架构" aria-hidden="true">#</a> 监控系统技术架构</h2><h3 id="数据采集" tabindex="-1"><a class="header-anchor" href="#数据采集" aria-hidden="true">#</a> 数据采集</h3><p>数据采集通常会有一个客户端，与被采集的目标实例运行在一起，采集目标实例的运行指标、日志、追踪等信息，并将采集到的数据通过 API 进行暴露或者直接上报。</p><h4 id="指标全局字段" tabindex="-1"><a class="header-anchor" href="#指标全局字段" aria-hidden="true">#</a> 指标全局字段</h4><p>为了后续的关联分析，采集的数据需要标明来源等信息，通常需要以下全局字段:</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>category</td><td>指标分类，通常可以分为 infrastructure、platform、application 三类，即对应基础设施层、中间件层、应用层</td></tr><tr><td>host_name</td><td>采集客户端所在的主机名称</td></tr><tr><td>host_ipv4</td><td>采集客户端所在的主机 IP</td></tr><tr><td>system</td><td>被监控服务的系统名称（一般是所属的业务系统）</td></tr><tr><td>service</td><td>被监控服务的服务名，最重要的一个字段，大盘需要根据该字段确定要查询的目标数据以及关联分析</td></tr><tr><td>instance</td><td>被监控服务的实例名称，一个服务通常会有多个实例，该字段用来标识具体的实例信息， 方便关联分析和故障定位</td></tr><tr><td>type</td><td>指标类型分类，更加细化的指标分类，比如 mysql、jvm、cpu、memory 等，可以基于该 type 将数据存储在不同的索引库中</td></tr><tr><td>timestamp</td><td>指标和日志产生的时间戳</td></tr></tbody></table><p>通过这些字段，我们能精确定位某个系统下的任意服务实例位于哪台机器上，从而去目标主机查看实例的状态；也可以在监控系统中通过这些字段关联查询到具体实例的日志、指标、追踪等信息。</p><h4 id="基础层与中间件层采集" tabindex="-1"><a class="header-anchor" href="#基础层与中间件层采集" aria-hidden="true">#</a> 基础层与中间件层采集</h4><p>Linux 系统内核以及几乎所有的的中间件都有运行时的统计信息。比如 Linux 的 <code>/proc</code> 目录，MySQL 的 performance schema 等。</p><p>对于基础层和中间件层，有非常多的优秀成熟开源的监控组件可以使用：</p>',15)),t("ul",null,[t("li",null,[t("p",null,[t("strong",null,[t("a",f,[r[4]||(r[4]=l("Telegraf",-1)),n(e)])]),r[5]||(r[5]=l("：一款开源的基于 Go 语言开发的指标采集软件，有众多的采集、处理和输出插件，基本能覆盖日常开发的指标采集需求。",-1))])]),t("li",null,[t("p",null,[t("strong",null,[t("a",m,[r[6]||(r[6]=l("Elastic Beats",-1)),n(e)])]),r[7]||(r[7]=l("：ElasticSearch 公司开发的一系列采集客户端。比如用于采集日志的 ",-1)),r[8]||(r[8]=t("code",null,"Filebeat",-1)),r[9]||(r[9]=l("；用于采集指标的",-1)),r[10]||(r[10]=t("code",null,"Metricbect",-1)),r[11]||(r[11]=l("；用于采集网络的：",-1)),r[12]||(r[12]=t("code",null,"Packetbeat",-1)),r[13]||(r[13]=l("。",-1))])]),t("li",null,[t("p",null,[t("strong",null,[t("a",b,[r[14]||(r[14]=l("Prometheus Exporter",-1)),n(e)])]),r[15]||(r[15]=l("：围绕 Prometheus 开发的一系列 Exporter，会暴露指标采集 API，供 Prometheus 定时拉取。",-1))])]),t("li",null,[t("p",null,[t("strong",null,[t("a",h,[r[16]||(r[16]=l("OpenTelemetry",-1)),n(e)])]),r[17]||(r[17]=l("：由 CNCF 的 OpenTracing 和 Google/微软支持的 OpenCensus 合并而来，最初是为了实现链路追踪的标准化，后来逐渐演化为一套完整的可观测性解决方案。自 2019 年发布以来，逐渐成为了云原生领域可观测性数据收集的事实标准。",-1))])])]),r[95]||(r[95]=t("p",null,[t("img",{src:"https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/otel-diagram.svg",alt:""})],-1)),r[96]||(r[96]=t("h4",{id:"应用层指标采集",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#应用层指标采集","aria-hidden":"true"},"#"),l(" 应用层指标采集")],-1)),r[97]||(r[97]=t("p",null,"应用层的指标采集要相对更麻烦一些，因为不同的语言实现通常需要不同的方式采集。但总体来看有三种如下方式：",-1)),t("ul",null,[r[35]||(r[35]=t("li",null,[t("p",null,[t("strong",null,"应用 API 暴露"),l("：比如 SpringBoot 应用 "),t("code",null,"/_actuator"),l(" API、Prometheus 要求的 "),t("code",null,"/metrics"),l(" API。我们可以根据实际情况自行编写相应的 API 对外暴露指标。这里需要注意指标标记的合理性，避免表示不准确和数据量爆炸，对服务本身和监控系统造成影响。一般来说除了指标名、时间戳和指标值外，其他 lable 都是固定的，这样 Prometheus 等时序数据库在存储时会进行压缩，节省存储空间。")])],-1)),t("li",null,[r[24]||(r[24]=t("p",null,[t("strong",null,"SDK 采集上报"),l("：将采集上报功能以 SDK 的形式集成到服务中。好处是灵活性高，可以自行编写 SDK，最大程度满足自身的需求，但坏处是会对业务服务造成侵入。主流语言通常会有很多优秀开源库，即使是自己造轮子通常也是在其基础之上做进一步的封装。以笔者比较熟悉的 Java 生态为例，一些优秀的开源工具库：")],-1)),t("ul",null,[t("li",null,[t("a",v,[r[18]||(r[18]=l("OSHI: Operating System and Hardware Information",-1)),n(e)]),r[19]||(r[19]=l(" 用来收集操作系统和硬件信息的 Java 开源库。",-1))]),t("li",null,[t("a",x,[r[20]||(r[20]=l("Dropwizard Metrics",-1)),n(e)]),r[21]||(r[21]=l(" 用来测量 Java 应用的相关指标的开源库。",-1))]),t("li",null,[t("a",k,[r[22]||(r[22]=l("opentelemetry-java",-1)),n(e)]),r[23]||(r[23]=l("：opentelemetry 提供的 Java SDK。",-1))])])]),t("li",null,[r[34]||(r[34]=t("p",null,[t("strong",null,"无侵入式采集"),l("：SDK 的方式一般需要应用添加依赖，修改配置等操作，通常会影响到线上的服务运行。更好的方式是使用无侵入技术，将采集功能无缝集成到应用中。一些常见的技术有：")],-1)),t("ul",null,[t("li",null,[t("p",null,[r[26]||(r[26]=t("strong",null,"Java Agent",-1)),r[27]||(r[27]=l(": Java 提供了字节码编程，可以动态的修改服务配置。MegaEase 就使用了该技术实现了 ",-1)),t("a",P,[r[25]||(r[25]=l("EaseAgent 无侵入式观测系统",-1)),n(e)])])]),t("li",null,[t("p",null,[r[29]||(r[29]=t("strong",null,"ServiceMesh SideCar",-1)),r[30]||(r[30]=l(": 在 Service Mesh 架构下，可以将服务发现、流量调度、指标日志和分布式追踪收集等非业务性功能放到 SideCar 中，从而避免对应用造成影响。在 MegaEase，我们结合 JavaAgent 和 SideCar 实现了 ",-1)),t("a",S,[r[28]||(r[28]=l("EaseMesh 服务网格",-1)),n(e)]),r[31]||(r[31]=l("， ",-1)),r[32]||(r[32]=t("strong",null,"可以在不改变一行代码的情况下将 Spring Cloud 应用迁移到服务网格架构，整个架构已经被赋予了全功能的服务治理、弹性设计和完整的可观察性，而用户不需要修改一行代码",-1)),r[33]||(r[33]=l("。",-1))])])])])]),r[98]||(r[98]=o('<h4 id="采集端注意事项" tabindex="-1"><a class="header-anchor" href="#采集端注意事项" aria-hidden="true">#</a> 采集端注意事项</h4><ul><li><p>监控系统属于控制面的功能，和业务逻辑没有直接关系。因此业务系统不应该感知到监控系统的存在，更重要的，监控系统的资源占用要尽可能小，不应该影响到业务系统的正常运行。</p></li><li><p>尽可能对应用开发透明，比如优先使用上述提到的无侵入的方式采集应用的监控数据。</p></li><li><p>如果做不到无侵入，比如要使用 SDK 的方式，也要做到技术收口，采用切面编程的范式来实现，避免对业务逻辑造成影响。</p></li><li><p>采集数据的传输应该采用标准的协议，比如 HTTP 协议。</p></li><li><p>采集数据的格式应该采用标准的格式，比如 JSON、ProtoBuf 等，尤其是数据量过大时，尽量使用高效率的二进制协议。</p></li><li><p>如果条件允许，应该使用物理上的专用网络来隔离业务网络，避免对业务服务的访问造成影响。</p></li></ul><h3 id="数据传输与清洗" tabindex="-1"><a class="header-anchor" href="#数据传输与清洗" aria-hidden="true">#</a> 数据传输与清洗</h3><p>当数据收集上来后，我们需要对数据进行清洗梳理，从而实现</p><ul><li><strong>日志数据的结构化</strong></li><li><strong>监控数据的标准化</strong></li></ul><p>这里需要两个组件的支持：</p><ul><li><p><strong>数据总线</strong>：通过数据总线来对接所有的收集组件，成为数据集散地，另外也作为数据缓存和扩展的中间 Broker，Kafka 非常适合担任这样一个角色。</p></li><li><p><strong>数据 ETL</strong>：ETL 工具用来对数据进行清洗，将客户端采集发送到数据总线的数据解析处理，最终生成结构化的数据写入到存储组件中。常用的开源组件有 LogStash，Fluentd 等，当然也可以自研，选择更合适的高性能语言并满足内部更加复杂的清洗需求。</p></li></ul><h4 id="数据清洗注意事项" tabindex="-1"><a class="header-anchor" href="#数据清洗注意事项" aria-hidden="true">#</a> 数据清洗注意事项</h4><ul><li><p>清洗组件要做到高性能、高可用。一般来说，指标数据是周期性产生的,其数据量并不会跟随当前请求并发量的多少变化而变化。另外一些数据(比如日志)则是和系统接受的请求并发量有着直接的关系。因此数据处理管线需要能够支撑高并发、大数据量的写入，同时也起到削峰填谷的作用。Kafka 可以非常完美的符合这些要求。</p></li><li><p>清洗逻辑要尽量的简单，不应该在清洗组件做过多复杂的设计。</p></li><li><p>清洗组件必须是无状态的，能够支持水平扩展。</p></li><li><p>尽量提升数据处理的效率，比如使用 Golang 开发清洗组件；对 JVM 的语言做优化，如使用无锁队列、固定大小的 buffer 等提升效率。</p></li></ul><h3 id="数据存储" tabindex="-1"><a class="header-anchor" href="#数据存储" aria-hidden="true">#</a> 数据存储</h3><p>在存储方面，以 <strong>ElasticSearch</strong> 为代表的全文搜索引擎和以 <strong>Prometheus</strong> 为代表的时序数据库已经成为事实上的标准。一般来说可以将以日志为主的、需要全文检索的数据写入到 ES；将告警相关的数据写入到 Prometheus 中。</p><h4 id="存储注意事项" tabindex="-1"><a class="header-anchor" href="#存储注意事项" aria-hidden="true">#</a> 存储注意事项</h4><ul><li><p>根据需要对数据按天、小时或分钟等级别建立索引，避免单个索引数据量过大。</p></li><li><p>全局字段指标通常需要单独建立索引，以方便后续的关联分析。</p></li><li><p>尽量提升磁盘的 IO 性能，比如使用 SSD，使用文件系统 cache 机制。避免使用 NFS 等远程文件系统。</p></li><li><p>监控数据的特点一般是：数据量大，有效期短。因此可以考虑数据冷热分离。热数据存入 ES 和 Prometheus 中做检索和告警；冷数据以时间区间命名做归档存入其他的分布式文件系统做备份。</p></li><li><p>按照业务级别，需要对日志必须分级,高级别日志需要满足异地容灾、冗余。</p></li><li><p>根据业务敏感度，要考虑到数据的脱敏和归档安全</p></li></ul><h3 id="数据展示" tabindex="-1"><a class="header-anchor" href="#数据展示" aria-hidden="true">#</a> 数据展示</h3><p>以图表的形式展示相关的度量指标，方便我们查看系统的当前状态。可以使用 <strong>Grafana</strong> 实现该功能，作为一款非常流行的 dashboard 组件，已经有了众多现成的图表模版，对于大多数系统和中间件可以直接使用。当然对于应用层的监控，可能需要自行设计开发进行展示了。</p><p>总体而言，需要有以下功能的展示：</p><ul><li><p>总体系统健康和容量情况，包括</p><ul><li>关键服务的健康状态</li><li>系统的 SLA 指标，包括吞吐量、响应时间（P99、P95、P90、P75、P50）、错误率（2XX、3XX、4XX、5XX）。</li><li>各种中间件的关键指标，比如 MySQL 的连接数、Redis 的内存碎片等。</li><li>服务器基础资源的健康状态，比如 CPU、内存、磁盘、网络等。</li></ul></li><li><p>TopN 视图：包括最慢请求、最热请求、错误最多请求等</p></li></ul><p><img src="https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/topn01.png" alt="alt text"></p><h4 id="数据告警" tabindex="-1"><a class="header-anchor" href="#数据告警" aria-hidden="true">#</a> 数据告警</h4><p>当系统容量、性能达到瓶颈，或者某个组件出现问题，需要告警组件及时的通知相关人员介入处理。对于告警，需要定义告警规则，一般需要处理如下一些情况：</p>',20)),t("ul",null,[t("li",null,[t("p",null,[r[37]||(r[37]=t("strong",null,"基础探活",-1)),r[38]||(r[38]=l("：采用心跳机制，定期检查某个服务的连通性，让心跳检查失败时，触发告警。MegaEase 开源了 ",-1)),t("a",w,[r[36]||(r[36]=l("EaseProbe",-1)),n(e)]),r[39]||(r[39]=l(" 可以作为众多服务的探活工具。 ",-1)),r[40]||(r[40]=t("img",{src:"https://pub-08b57ed9c8ce4fadab4077a9d577e857.r2.dev/overview.png",alt:""},null,-1)),r[41]||(r[41]=l("，",-1))])]),r[42]||(r[42]=o("<li><p><strong>指标 - 持续时间 - 阈值：</strong> 当某个指标再一段时间内持续超过某个阈值时，触发告警。比如 两分钟内 CPU 使用率持续超过 90%。</p></li><li><p><strong>指标 - 持续时间 - 百分比 - 阈值：</strong> 当某个指标再一段时间内持续超过某个百分比时，触发告警。比如两分钟内 P99 超过 300ms。</p></li><li><p><strong>指标 - 持续时间 - 函数 - 阈值：</strong> 此时需要一些聚合计算，某些函数的计算在一段时间内超过阈值。比如两分钟内的 JVM GC 次数（sum 函数计算）超过阈值。</p></li><li><p><strong>指标 - 持续时间 - 关键词 - 匹配次数：</strong> 日志中的某个关键词在一段时间内出现的次数超过阈值，关键词需要支持精确匹配和正则匹配。</p></li>",4))]),r[99]||(r[99]=t("p",null,"设置告警规则时，首先需要梳理关键业务路径和非关键业务路径，并以此制定故障分级原则。对于关键业务异常要有事件告警，其次需要对如下关键指标设置告警：",-1)),r[100]||(r[100]=t("ul",null,[t("li",null,"各业务接口的失败率指标"),t("li",null,"P99/P90/P50 指标"),t("li",null,"主机/服务实例的 CPU、内存、JVM 等基础资源指标"),t("li",null,"主机/服务实例的饱和度指标（磁盘容量、网络IO、磁盘IO）"),t("li",null,"各中间件关键指标")],-1)),r[101]||(r[101]=t("p",null,"上述提到的组件都提供了告警工具，通常可以满足需求。比如：",-1)),t("ul",null,[t("li",null,[t("a",A,[r[43]||(r[43]=l("Prometheus Alert Manager",-1)),n(e)])]),t("li",null,[t("a",E,[r[44]||(r[44]=l("Elastic Alerting",-1)),n(e)])]),t("li",null,[t("a",y,[r[45]||(r[45]=l("Grafana Alerting",-1)),n(e)])])]),r[102]||(r[102]=t("p",null,"当然也可以自研，梳理出关键指标后形成告警规则模版，每当有新服务引入时自动创建告警规则，然后定时监测指标信息，及时告警",-1)),r[103]||(r[103]=t("hr",null,null,-1)),r[104]||(r[104]=t("p",null,"至此，如果全部采用开源组件实现一个全栈监控系统，技术栈如下：",-1)),t("ul",null,[t("li",null,[r[60]||(r[60]=t("strong",null,"数据采集端",-1)),t("ul",null,[t("li",null,[r[47]||(r[47]=t("strong",null,"基础层和中间件指标采集",-1)),r[48]||(r[48]=l(" - ",-1)),t("a",M,[r[46]||(r[46]=l("Telegraf",-1)),n(e)])]),t("li",null,[r[51]||(r[51]=t("strong",null,"日志采集",-1)),r[52]||(r[52]=l(" - ",-1)),t("a",C,[r[49]||(r[49]=l("Filebeat",-1)),n(e)]),r[53]||(r[53]=l(" 和 ",-1)),t("a",T,[r[50]||(r[50]=l("Fluentd",-1)),n(e)])]),t("li",null,[r[55]||(r[55]=t("strong",null,"Java Agent",-1)),r[56]||(r[56]=l(" - ",-1)),t("a",I,[r[54]||(r[54]=l("EaseAgent",-1)),n(e)])]),t("li",null,[r[58]||(r[58]=t("strong",null,"OpenTelemetry",-1)),r[59]||(r[59]=l(" - ",-1)),t("a",J,[r[57]||(r[57]=l("OpenTelemetry",-1)),n(e)])])])]),t("li",null,[r[69]||(r[69]=t("strong",null,"数据处理管线",-1)),t("ul",null,[t("li",null,[r[62]||(r[62]=t("strong",null,"数据总线",-1)),r[63]||(r[63]=l(" - ",-1)),t("a",L,[r[61]||(r[61]=l("Apache Kafka",-1)),n(e)])]),t("li",null,[r[66]||(r[66]=t("strong",null,"数据 ETL",-1)),r[67]||(r[67]=l(" - ",-1)),t("a",X,[r[64]||(r[64]=l("Logstash",-1)),n(e)]),r[68]||(r[68]=l("，",-1)),t("a",D,[r[65]||(r[65]=l("Fluentd",-1)),n(e)])])])]),t("li",null,[r[78]||(r[78]=t("strong",null,"数据存储",-1)),t("ul",null,[t("li",null,[r[71]||(r[71]=t("strong",null,"日志数据存储",-1)),r[72]||(r[72]=l(" - ",-1)),t("a",O,[r[70]||(r[70]=l("ElasticSearch",-1)),n(e)])]),t("li",null,[r[75]||(r[75]=t("strong",null,"指标数据存储",-1)),r[76]||(r[76]=l(" - ",-1)),t("a",B,[r[73]||(r[73]=l("Prometheus",-1)),n(e)]),r[77]||(r[77]=l("，",-1)),t("a",F,[r[74]||(r[74]=l("InfluxDB",-1)),n(e)])])])]),t("li",null,[r[89]||(r[89]=t("strong",null,"数据图表",-1)),t("ul",null,[t("li",null,[r[80]||(r[80]=t("strong",null,"数据展示",-1)),r[81]||(r[81]=l("：",-1)),t("a",G,[r[79]||(r[79]=l("Grafana",-1)),n(e)])]),t("li",null,[r[85]||(r[85]=t("strong",null,"异常告警",-1)),r[86]||(r[86]=l("：",-1)),t("a",N,[r[82]||(r[82]=l("Prometheus Alert Manager",-1)),n(e)]),r[87]||(r[87]=l("，",-1)),t("a",K,[r[83]||(r[83]=l("Elastic Alerting",-1)),n(e)]),r[88]||(r[88]=l("，",-1)),t("a",V,[r[84]||(r[84]=l("Grafana Alerting",-1)),n(e)])])])])]),r[105]||(r[105]=t("p",null,"最终形成如下架构",-1)),r[106]||(r[106]=t("p",null,[t("img",{src:"https://megaease.cn/imgs/docs/ease.monitor.arch.zh.png",alt:""})],-1)),t("p",null,[r[91]||(r[91]=l("图片来自",-1)),t("a",z,[r[90]||(r[90]=l("MegaEase 官网",-1)),n(e)])])])}const Q=i(d,[["render",U],["__file","monitoring.html.vue"]]);export{Q as default};
