import{_ as r,r as d,c as o,o as n,a as l,b as t,d as i,e as s}from"./app-C-eiXR-Q.js";const p={},c={href:"https://dev.mysql.com/doc/refman/9.2/en/identifier-length.html",target:"_blank",rel:"noopener noreferrer"};function h(m,e){const a=d("ExternalLinkIcon");return n(),o("div",null,[e[3]||(e[3]=l('<h1 id="mysql-开发规范" tabindex="-1"><a class="header-anchor" href="#mysql-开发规范" aria-hidden="true">#</a> MySQL 开发规范</h1><h2 id="基础规范" tabindex="-1"><a class="header-anchor" href="#基础规范" aria-hidden="true">#</a> 基础规范</h2><ol><li><p>如无特殊要求，必须使用 InnoDB 存储引擎。</p></li><li><p>尽量避免在数据库层面做计算。</p></li><li><p>对于性能要求高的业务，禁止使用存储过程、视图、触发器等。</p></li></ol><p>【解读】对于高并发、高性能的业务场景，上述计算会导致额外开销，并且不利于水平扩展。</p><ol start="4"><li><p>禁止使用外键，完整性约束由应用层实现。</p></li><li><p>数据库时区必须使用 UTC 时区。</p></li></ol><h2 id="建表规范" tabindex="-1"><a class="header-anchor" href="#建表规范" aria-hidden="true">#</a> 建表规范</h2><ol><li>如无非常特殊要求，一律使用 <code>utf8mb4</code> 字符集。</li></ol><p>【解读】MySQL 中的 utf8 其实是 utf8mb3，采用 1 ~ 3 字节表示字符，utf8mb4 才是真正的 UTF-8 字符集。 MySQL 8.0 已经将 utf8mb4 作为默认字符集。</p><ol start="2"><li>数据表、表字段必须有注释，最好是中文。如果是枚举类型，必须说明每种枚举值的含义。</li></ol><p>【解读】代码是最好的注释，写在文档中的注释注定会过时。</p><ol start="3"><li>表名长度尽量控制在 52 个字符以内，最大不超过 64 字符。</li></ol>',11)),t("p",null,[e[1]||(e[1]=i("【解读】MySQL 表名长度限制为",-1)),t("a",c,[e[0]||(e[0]=i("64个字符",-1)),s(a)]),e[2]||(e[2]=i("，但为了兼容性和可读性，建议不超过52个字符，为后续维护预留出 12 个 字符空间。",-1))]),e[4]||(e[4]=l('<ol start="4"><li><p>表名要做到见文知意，必须使用小写字母，单词之间用下划线分隔；禁止使用拼音、拼音缩写；禁止使用保留字。</p></li><li><p>表名最好使用业务域或者业务模块作为前缀，即 <code>{domain}_{resource}</code>，resource 代表业务资源，不使用复数命名。比如 shipping_order、shipping_address、payment_order 等；</p></li><li><p>字典表需要使用 <code>dict</code> 前缀标识，比如 <code>dict_country</code>、<code>payment_dict_order_status</code> 等。</p></li><li><p>每张表包含公共字段：id、create_time、update_time、delete_time，并且需要添加索引。</p><ul><li><code>id</code>：物理主键，unsigned bigint 类型，单表自增。</li><li><code>create_time</code>：创建时间，datetime 类型，默认为 current_timestamp。</li><li><code>update_time</code>：更新时间，datetime 类型，默认为 current_timestamp，且在每次更新时自动更新。</li><li><code>delete_time</code>：删除时间，datetime 类型，逻辑删除标识。</li></ul></li></ol><h2 id="索引规范" tabindex="-1"><a class="header-anchor" href="#索引规范" aria-hidden="true">#</a> 索引规范</h2><ol><li></li></ol><h2 id="字段规范" tabindex="-1"><a class="header-anchor" href="#字段规范" aria-hidden="true">#</a> 字段规范</h2><ol><li><p>对于数据列，使用英文命名，单词之间用下划线分割。</p></li><li><p>使用 CHAR 类型存储长度固定的数据；使用 VARCHAR 存储长度不固定的数据。</p></li><li><p>金额使用 DECIMAL 类型，禁止使用浮点数类型。</p></li><li><p>时间使用 DATETIME 类型，禁止使用 VARCHAR 或者 TIMESTAMP 类型，否则计算会出现各种错误。</p></li><li><p>除非有特别原因，尽可能的使用 NOT NULL 约束。</p></li><li><p>可以适当冗余字段，以提高查询性能。</p></li></ol><h2 id="sql-规范" tabindex="-1"><a class="header-anchor" href="#sql-规范" aria-hidden="true">#</a> SQL 规范</h2><h2 id="操作规范" tabindex="-1"><a class="header-anchor" href="#操作规范" aria-hidden="true">#</a> 操作规范</h2><ul><li>禁止删除列</li><li>写更新、删除语句时，先写 WHERE 条件，再写 SET 或 DELETE。</li></ul>',8))])}const f=r(p,[["render",h],["__file","mysql.html.vue"]]);export{f as default};
